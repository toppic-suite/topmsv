<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Namespace: column</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Namespace: column</h1>

    




<section>

<header>
    
        <h2>
            <span class="ancestors"><a href="DataTable.defaults.html">.defaults</a>.</span>column</h2>
        
    
</header>

<article>
    <div class="container-overview">
    
        
            <div class="description">Column options that can be given to DataTables at initialisation time.</div>
        

        


<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11625">line 11625</a>
    </li></ul></dd>
    

    

    

    
</dl>


        
    
    </div>

    

    

    

    

    

    

    
        <h3 class="subsection-title">Members</h3>

        
            
<h4 class="name" id=".cellType"><span class="type-signature">(static) </span>cellType<span class="type-signature"> :string</span></h4>




<div class="description">
    Change the cell type created for the column - either TD cells or TH cells. This
can be useful as TH cells have semantic meaning in the table body, allowing them
to act as a header for a row (you may wish to add scope='row' to the TH elements).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>td</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12141">line 12141</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Make the first column use TH cells
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "cellType": "th"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".cellType"><span class="type-signature">(static) </span>cellType<span class="type-signature"> :string</span></h4>




<div class="description">
    Change the cell type created for the column - either TD cells or TH cells. This
can be useful as TH cells have semantic meaning in the table body, allowing them
to act as a header for a row (you may wish to add scope='row' to the TH elements).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>td</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12141">line 12141</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Make the first column use TH cells
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "cellType": "th"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".cellType"><span class="type-signature">(static) </span>cellType<span class="type-signature"> :string</span></h4>




<div class="description">
    Change the cell type created for the column - either TD cells or TH cells. This
can be useful as TH cells have semantic meaning in the table body, allowing them
to act as a header for a row (you may wish to add scope='row' to the TH elements).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>td</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12141">line 12141</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Make the first column use TH cells
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "cellType": "th"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".class"><span class="type-signature">(static) </span>class<span class="type-signature"> :string</span></h4>




<div class="description">
    Class to give to each cell in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12165">line 12165</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "class": "my_class", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "class": "my_class" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".class"><span class="type-signature">(static) </span>class<span class="type-signature"> :string</span></h4>




<div class="description">
    Class to give to each cell in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12165">line 12165</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "class": "my_class", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "class": "my_class" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".class"><span class="type-signature">(static) </span>class<span class="type-signature"> :string</span></h4>




<div class="description">
    Class to give to each cell in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12165">line 12165</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "class": "my_class", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "class": "my_class" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".contentPadding"><span class="type-signature">(static) </span>contentPadding<span class="type-signature"> :string</span></h4>




<div class="description">
    When DataTables calculates the column widths to assign to each column,
it finds the longest string in each column and then constructs a
temporary table and reads the widths from that. The problem with this
is that "mmm" is much wider then "iiii", but the latter is a longer
string - thus the calculation can go wrong (doing it properly and putting
it into an DOM object and measuring that is horribly(!) slow). Thus as
a "work around" we provide this option. It will append its value to the
text that is found to be the longest string for the column - i.e. padding.
Generally you shouldn't need this!
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string<i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12199">line 12199</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "contentPadding": "mmm"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".contentPadding"><span class="type-signature">(static) </span>contentPadding<span class="type-signature"> :string</span></h4>




<div class="description">
    When DataTables calculates the column widths to assign to each column,
it finds the longest string in each column and then constructs a
temporary table and reads the widths from that. The problem with this
is that "mmm" is much wider then "iiii", but the latter is a longer
string - thus the calculation can go wrong (doing it properly and putting
it into an DOM object and measuring that is horribly(!) slow). Thus as
a "work around" we provide this option. It will append its value to the
text that is found to be the longest string for the column - i.e. padding.
Generally you shouldn't need this!
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string<i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12199">line 12199</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "contentPadding": "mmm"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".contentPadding"><span class="type-signature">(static) </span>contentPadding<span class="type-signature"> :string</span></h4>




<div class="description">
    When DataTables calculates the column widths to assign to each column,
it finds the longest string in each column and then constructs a
temporary table and reads the widths from that. The problem with this
is that "mmm" is much wider then "iiii", but the latter is a longer
string - thus the calculation can go wrong (doing it properly and putting
it into an DOM object and measuring that is horribly(!) slow). Thus as
a "work around" we provide this option. It will append its value to the
text that is found to be the longest string for the column - i.e. padding.
Generally you shouldn't need this!
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string<i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12199">line 12199</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "contentPadding": "mmm"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".createdCell"><span class="type-signature">(static) </span>createdCell<span class="type-signature"> :function</span></h4>




<div class="description">
    Developer definable function that is called whenever a cell is created (Ajax source,
etc) or processed for input (DOM source). This can be used as a compliment to mRender
allowing you to modify the DOM element (add background colour for example) when the
element is available.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">function</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11806">line 11806</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>$(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [3],
         "createdCell": function (td, cellData, rowData, row, col) {
           if ( cellData == "1.7" ) {
             $(td).css('color', 'blue')
           }
         }
       } ]
     });
   } );</code></pre>



        
            
<h4 class="name" id=".createdCell"><span class="type-signature">(static) </span>createdCell<span class="type-signature"> :function</span></h4>




<div class="description">
    Developer definable function that is called whenever a cell is created (Ajax source,
etc) or processed for input (DOM source). This can be used as a compliment to mRender
allowing you to modify the DOM element (add background colour for example) when the
element is available.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">function</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11806">line 11806</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>$(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [3],
         "createdCell": function (td, cellData, rowData, row, col) {
           if ( cellData == "1.7" ) {
             $(td).css('color', 'blue')
           }
         }
       } ]
     });
   } );</code></pre>



        
            
<h4 class="name" id=".createdCell"><span class="type-signature">(static) </span>createdCell<span class="type-signature"> :function</span></h4>




<div class="description">
    Developer definable function that is called whenever a cell is created (Ajax source,
etc) or processed for input (DOM source). This can be used as a compliment to mRender
allowing you to modify the DOM element (add background colour for example) when the
element is available.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">function</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11806">line 11806</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>$(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [3],
         "createdCell": function (td, cellData, rowData, row, col) {
           if ( cellData == "1.7" ) {
             $(td).css('color', 'blue')
           }
         }
       } ]
     });
   } );</code></pre>



        
            
<h4 class="name" id=".data"><span class="type-signature">(static) </span>data<span class="type-signature"> :string|int|function|null</span></h4>




<div class="description">
    This property can be used to read data from any data source property,
including deeply nested objects / properties. `data` can be given in a
number of different ways which effect its behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object. Note that
     function notation is recommended for use in `render` rather than
     `data` as it is much simpler to use as a renderer.
* `null` - use the original data source for the row rather than plucking
  data directly from it. This action has effects on two other
  initialisation options:
   * `defaultContent` - When null is given as the `data` option and
     `defaultContent` is specified for the column, the value defined by
     `defaultContent` will be used for the cell.
   * `render` - When null is used for the `data` option and the `render`
     option is specified for the column, the whole data source for the
     row is used for the renderer.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * `{array|object}` The data source for the row
     * `{string}` The type call data requested - this will be 'set' when
       setting data or 'filter', 'display', 'type', 'sort' or undefined
       when gathering data. Note that when `undefined` is given for the
       type DataTables expects to get the raw data for the object back<
     * `{*}` Data to set when the second parameter is 'set'.
   * Return:
     * The return value from the function is not required when 'set' is
       the type of call, but otherwise the return is what will be used
       for the data requested.

Note that `data` is a getter and setter option. If you just require
formatting of data for output, you will likely want to use `render` which
is simply a getter and thus simpler to use.

Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
name change reflects the flexibility of this property and is consistent
with the naming of mRender. If 'mDataProp' is given, then it will still
be used by DataTables, as it automatically maps the old name to the new
if required.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Use automatically calculated column index</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11847">line 11847</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Read table data from objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {value},
   //      "version": {value},
   //      "grade": {value}
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/objects.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform" },
         { "data": "version" },
         { "data": "grade" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Read information from deeply nested objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {
   //         "inner": {value}
   //      },
   //      "details": [
   //         {value}, {value}
   //      ]
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform.inner" },
         { "data": "platform.details.0" },
         { "data": "platform.details.1" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `data` as a function to provide different information for
   // sorting, filtering and display. In this case, currency (price)
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": function ( source, type, val ) {
           if (type === 'set') {
             source.price = val;
             // Store the computed dislay and filter values for efficiency
             source.price_display = val=="" ? "" : "$"+numberFormat(val);
             source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             return;
           }
           else if (type === 'display') {
             return source.price_display;
           }
           else if (type === 'filter') {
             return source.price_filter;
           }
           // 'sort', 'type' and undefined all just use the integer
           return source.price;
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using default content
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null,
         "defaultContent": "Click to edit"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using array notation - outputting a list from an array
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "name[, ]"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".data"><span class="type-signature">(static) </span>data<span class="type-signature"> :string|int|function|null</span></h4>




<div class="description">
    This property can be used to read data from any data source property,
including deeply nested objects / properties. `data` can be given in a
number of different ways which effect its behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object. Note that
     function notation is recommended for use in `render` rather than
     `data` as it is much simpler to use as a renderer.
* `null` - use the original data source for the row rather than plucking
  data directly from it. This action has effects on two other
  initialisation options:
   * `defaultContent` - When null is given as the `data` option and
     `defaultContent` is specified for the column, the value defined by
     `defaultContent` will be used for the cell.
   * `render` - When null is used for the `data` option and the `render`
     option is specified for the column, the whole data source for the
     row is used for the renderer.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * `{array|object}` The data source for the row
     * `{string}` The type call data requested - this will be 'set' when
       setting data or 'filter', 'display', 'type', 'sort' or undefined
       when gathering data. Note that when `undefined` is given for the
       type DataTables expects to get the raw data for the object back<
     * `{*}` Data to set when the second parameter is 'set'.
   * Return:
     * The return value from the function is not required when 'set' is
       the type of call, but otherwise the return is what will be used
       for the data requested.

Note that `data` is a getter and setter option. If you just require
formatting of data for output, you will likely want to use `render` which
is simply a getter and thus simpler to use.

Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
name change reflects the flexibility of this property and is consistent
with the naming of mRender. If 'mDataProp' is given, then it will still
be used by DataTables, as it automatically maps the old name to the new
if required.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Use automatically calculated column index</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11847">line 11847</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Read table data from objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {value},
   //      "version": {value},
   //      "grade": {value}
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/objects.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform" },
         { "data": "version" },
         { "data": "grade" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Read information from deeply nested objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {
   //         "inner": {value}
   //      },
   //      "details": [
   //         {value}, {value}
   //      ]
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform.inner" },
         { "data": "platform.details.0" },
         { "data": "platform.details.1" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `data` as a function to provide different information for
   // sorting, filtering and display. In this case, currency (price)
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": function ( source, type, val ) {
           if (type === 'set') {
             source.price = val;
             // Store the computed dislay and filter values for efficiency
             source.price_display = val=="" ? "" : "$"+numberFormat(val);
             source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             return;
           }
           else if (type === 'display') {
             return source.price_display;
           }
           else if (type === 'filter') {
             return source.price_filter;
           }
           // 'sort', 'type' and undefined all just use the integer
           return source.price;
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using default content
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null,
         "defaultContent": "Click to edit"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using array notation - outputting a list from an array
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "name[, ]"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".data"><span class="type-signature">(static) </span>data<span class="type-signature"> :string|int|function|null</span></h4>




<div class="description">
    This property can be used to read data from any data source property,
including deeply nested objects / properties. `data` can be given in a
number of different ways which effect its behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object. Note that
     function notation is recommended for use in `render` rather than
     `data` as it is much simpler to use as a renderer.
* `null` - use the original data source for the row rather than plucking
  data directly from it. This action has effects on two other
  initialisation options:
   * `defaultContent` - When null is given as the `data` option and
     `defaultContent` is specified for the column, the value defined by
     `defaultContent` will be used for the cell.
   * `render` - When null is used for the `data` option and the `render`
     option is specified for the column, the whole data source for the
     row is used for the renderer.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * `{array|object}` The data source for the row
     * `{string}` The type call data requested - this will be 'set' when
       setting data or 'filter', 'display', 'type', 'sort' or undefined
       when gathering data. Note that when `undefined` is given for the
       type DataTables expects to get the raw data for the object back<
     * `{*}` Data to set when the second parameter is 'set'.
   * Return:
     * The return value from the function is not required when 'set' is
       the type of call, but otherwise the return is what will be used
       for the data requested.

Note that `data` is a getter and setter option. If you just require
formatting of data for output, you will likely want to use `render` which
is simply a getter and thus simpler to use.

Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
name change reflects the flexibility of this property and is consistent
with the naming of mRender. If 'mDataProp' is given, then it will still
be used by DataTables, as it automatically maps the old name to the new
if required.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Use automatically calculated column index</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11847">line 11847</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Read table data from objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {value},
   //      "version": {value},
   //      "grade": {value}
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/objects.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform" },
         { "data": "version" },
         { "data": "grade" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Read information from deeply nested objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {
   //         "inner": {value}
   //      },
   //      "details": [
   //         {value}, {value}
   //      ]
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform.inner" },
         { "data": "platform.details.0" },
         { "data": "platform.details.1" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `data` as a function to provide different information for
   // sorting, filtering and display. In this case, currency (price)
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": function ( source, type, val ) {
           if (type === 'set') {
             source.price = val;
             // Store the computed dislay and filter values for efficiency
             source.price_display = val=="" ? "" : "$"+numberFormat(val);
             source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             return;
           }
           else if (type === 'display') {
             return source.price_display;
           }
           else if (type === 'filter') {
             return source.price_filter;
           }
           // 'sort', 'type' and undefined all just use the integer
           return source.price;
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using default content
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null,
         "defaultContent": "Click to edit"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using array notation - outputting a list from an array
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "name[, ]"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".dataProp"><span class="type-signature">(static) </span>dataProp<span class="type-signature"></span></h4>




<div class="description">
    This parameter has been replaced by `data` in DataTables to ensure naming
consistency. `dataProp` can still be used, as there is backwards
compatibility in DataTables for this option, but it is strongly
recommended that you use `data` in preference to `dataProp`.
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11838">line 11838</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id=".dataProp"><span class="type-signature">(static) </span>dataProp<span class="type-signature"></span></h4>




<div class="description">
    This parameter has been replaced by `data` in DataTables to ensure naming
consistency. `dataProp` can still be used, as there is backwards
compatibility in DataTables for this option, but it is strongly
recommended that you use `data` in preference to `dataProp`.
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11838">line 11838</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id=".dataProp"><span class="type-signature">(static) </span>dataProp<span class="type-signature"></span></h4>




<div class="description">
    This parameter has been replaced by `data` in DataTables to ensure naming
consistency. `dataProp` can still be used, as there is backwards
compatibility in DataTables for this option, but it is strongly
recommended that you use `data` in preference to `dataProp`.
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11838">line 11838</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id=".defaultContent"><span class="type-signature">(static) </span>defaultContent<span class="type-signature"> :string</span></h4>




<div class="description">
    Allows a default value to be given for a column's data, and will be used
whenever a null data source is encountered (this can be because `data`
is set to null, or because the data source itself is null).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12233">line 12233</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         {
           "data": null,
           "defaultContent": "Edit",
           "targets": [ -1 ]
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "data": null,
           "defaultContent": "Edit"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".defaultContent"><span class="type-signature">(static) </span>defaultContent<span class="type-signature"> :string</span></h4>




<div class="description">
    Allows a default value to be given for a column's data, and will be used
whenever a null data source is encountered (this can be because `data`
is set to null, or because the data source itself is null).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12233">line 12233</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         {
           "data": null,
           "defaultContent": "Edit",
           "targets": [ -1 ]
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "data": null,
           "defaultContent": "Edit"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".defaultContent"><span class="type-signature">(static) </span>defaultContent<span class="type-signature"> :string</span></h4>




<div class="description">
    Allows a default value to be given for a column's data, and will be used
whenever a null data source is encountered (this can be because `data`
is set to null, or because the data source itself is null).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12233">line 12233</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         {
           "data": null,
           "defaultContent": "Edit",
           "targets": [ -1 ]
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "data": null,
           "defaultContent": "Edit"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".name"><span class="type-signature">(static) </span>name<span class="type-signature"> :string</span></h4>




<div class="description">
    This parameter is only used in DataTables' server-side processing. It can
be exceptionally useful to know what columns are being displayed on the
client side, and to map these to database fields. When defined, the names
also allow DataTables to reorder information from the server if it comes
back in an unexpected order (i.e. if you switch your columns around on the
client-side, your server-side code does not also need updating).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12276">line 12276</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "name": "engine", "targets": [ 0 ] },
         { "name": "browser", "targets": [ 1 ] },
         { "name": "platform", "targets": [ 2 ] },
         { "name": "version", "targets": [ 3 ] },
         { "name": "grade", "targets": [ 4 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "name": "engine" },
         { "name": "browser" },
         { "name": "platform" },
         { "name": "version" },
         { "name": "grade" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".name"><span class="type-signature">(static) </span>name<span class="type-signature"> :string</span></h4>




<div class="description">
    This parameter is only used in DataTables' server-side processing. It can
be exceptionally useful to know what columns are being displayed on the
client side, and to map these to database fields. When defined, the names
also allow DataTables to reorder information from the server if it comes
back in an unexpected order (i.e. if you switch your columns around on the
client-side, your server-side code does not also need updating).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12276">line 12276</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "name": "engine", "targets": [ 0 ] },
         { "name": "browser", "targets": [ 1 ] },
         { "name": "platform", "targets": [ 2 ] },
         { "name": "version", "targets": [ 3 ] },
         { "name": "grade", "targets": [ 4 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "name": "engine" },
         { "name": "browser" },
         { "name": "platform" },
         { "name": "version" },
         { "name": "grade" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".name"><span class="type-signature">(static) </span>name<span class="type-signature"> :string</span></h4>




<div class="description">
    This parameter is only used in DataTables' server-side processing. It can
be exceptionally useful to know what columns are being displayed on the
client side, and to map these to database fields. When defined, the names
also allow DataTables to reorder information from the server if it comes
back in an unexpected order (i.e. if you switch your columns around on the
client-side, your server-side code does not also need updating).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12276">line 12276</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "name": "engine", "targets": [ 0 ] },
         { "name": "browser", "targets": [ 1 ] },
         { "name": "platform", "targets": [ 2 ] },
         { "name": "version", "targets": [ 3 ] },
         { "name": "grade", "targets": [ 4 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "name": "engine" },
         { "name": "browser" },
         { "name": "platform" },
         { "name": "version" },
         { "name": "grade" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderable"><span class="type-signature">(static) </span>orderable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable ordering on this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11740">line 11740</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderable"><span class="type-signature">(static) </span>orderable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable ordering on this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11740">line 11740</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderable"><span class="type-signature">(static) </span>orderable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable ordering on this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11740">line 11740</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderData"><span class="type-signature">(static) </span>orderData<span class="type-signature"> :array|int</span></h4>




<div class="description">
    Define which column(s) an order will occur on for this column. This
allows a column's ordering to take multiple columns into account when
doing a sort or use the data from a different column. For example first
name / last name columns make sense to do a multi-column sort over the
two columns.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>
|

<span class="param-type">int</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Takes the value of the column index automatically</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11626">line 11626</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderData": [ 0, 1 ], "targets": [ 0 ] },
         { "orderData": [ 1, 0 ], "targets": [ 1 ] },
         { "orderData": 2, "targets": [ 2 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderData": [ 0, 1 ] },
         { "orderData": [ 1, 0 ] },
         { "orderData": 2 },
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderData"><span class="type-signature">(static) </span>orderData<span class="type-signature"> :array|int</span></h4>




<div class="description">
    Define which column(s) an order will occur on for this column. This
allows a column's ordering to take multiple columns into account when
doing a sort or use the data from a different column. For example first
name / last name columns make sense to do a multi-column sort over the
two columns.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>
|

<span class="param-type">int</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Takes the value of the column index automatically</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11626">line 11626</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderData": [ 0, 1 ], "targets": [ 0 ] },
         { "orderData": [ 1, 0 ], "targets": [ 1 ] },
         { "orderData": 2, "targets": [ 2 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderData": [ 0, 1 ] },
         { "orderData": [ 1, 0 ] },
         { "orderData": 2 },
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderData"><span class="type-signature">(static) </span>orderData<span class="type-signature"> :array|int</span></h4>




<div class="description">
    Define which column(s) an order will occur on for this column. This
allows a column's ordering to take multiple columns into account when
doing a sort or use the data from a different column. For example first
name / last name columns make sense to do a multi-column sort over the
two columns.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>
|

<span class="param-type">int</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Takes the value of the column index automatically</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11626">line 11626</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderData": [ 0, 1 ], "targets": [ 0 ] },
         { "orderData": [ 1, 0 ], "targets": [ 1 ] },
         { "orderData": 2, "targets": [ 2 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderData": [ 0, 1 ] },
         { "orderData": [ 1, 0 ] },
         { "orderData": 2 },
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderDataType"><span class="type-signature">(static) </span>orderDataType<span class="type-signature"> :string</span></h4>




<div class="description">
    Defines a data source type for the ordering which can be used to read
real-time information from the table (updating the internally cached
version) prior to ordering. This allows ordering to occur on user
editable elements such as form inputs.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>std</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12320">line 12320</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
         { "type": "numeric", "targets": [ 3 ] },
         { "orderDataType": "dom-select", "targets": [ 4 ] },
         { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         { "orderDataType": "dom-text" },
         { "orderDataType": "dom-text", "type": "numeric" },
         { "orderDataType": "dom-select" },
         { "orderDataType": "dom-checkbox" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderDataType"><span class="type-signature">(static) </span>orderDataType<span class="type-signature"> :string</span></h4>




<div class="description">
    Defines a data source type for the ordering which can be used to read
real-time information from the table (updating the internally cached
version) prior to ordering. This allows ordering to occur on user
editable elements such as form inputs.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>std</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12320">line 12320</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
         { "type": "numeric", "targets": [ 3 ] },
         { "orderDataType": "dom-select", "targets": [ 4 ] },
         { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         { "orderDataType": "dom-text" },
         { "orderDataType": "dom-text", "type": "numeric" },
         { "orderDataType": "dom-select" },
         { "orderDataType": "dom-checkbox" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderDataType"><span class="type-signature">(static) </span>orderDataType<span class="type-signature"> :string</span></h4>




<div class="description">
    Defines a data source type for the ordering which can be used to read
real-time information from the table (updating the internally cached
version) prior to ordering. This allows ordering to occur on user
editable elements such as form inputs.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>std</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12320">line 12320</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
         { "type": "numeric", "targets": [ 3 ] },
         { "orderDataType": "dom-select", "targets": [ 4 ] },
         { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         { "orderDataType": "dom-text" },
         { "orderDataType": "dom-text", "type": "numeric" },
         { "orderDataType": "dom-select" },
         { "orderDataType": "dom-checkbox" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderSequence"><span class="type-signature">(static) </span>orderSequence<span class="type-signature"> :array</span></h4>




<div class="description">
    You can control the default ordering direction, and even alter the
behaviour of the sort handler (i.e. only allow ascending ordering etc)
using this parameter.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>[ 'asc', 'desc' ]</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11668">line 11668</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderSequence": [ "asc" ], "targets": [ 1 ] },
         { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
         { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         { "orderSequence": [ "asc" ] },
         { "orderSequence": [ "desc", "asc", "asc" ] },
         { "orderSequence": [ "desc" ] },
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderSequence"><span class="type-signature">(static) </span>orderSequence<span class="type-signature"> :array</span></h4>




<div class="description">
    You can control the default ordering direction, and even alter the
behaviour of the sort handler (i.e. only allow ascending ordering etc)
using this parameter.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>[ 'asc', 'desc' ]</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11668">line 11668</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderSequence": [ "asc" ], "targets": [ 1 ] },
         { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
         { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         { "orderSequence": [ "asc" ] },
         { "orderSequence": [ "desc", "asc", "asc" ] },
         { "orderSequence": [ "desc" ] },
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderSequence"><span class="type-signature">(static) </span>orderSequence<span class="type-signature"> :array</span></h4>




<div class="description">
    You can control the default ordering direction, and even alter the
behaviour of the sort handler (i.e. only allow ascending ordering etc)
using this parameter.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>[ 'asc', 'desc' ]</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11668">line 11668</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderSequence": [ "asc" ], "targets": [ 1 ] },
         { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
         { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         { "orderSequence": [ "asc" ] },
         { "orderSequence": [ "desc", "asc", "asc" ] },
         { "orderSequence": [ "desc" ] },
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".render"><span class="type-signature">(static) </span>render<span class="type-signature"> :string|int|function|object|null</span></h4>




<div class="description">
    This property is the rendering partner to `data` and it is suggested that
when you want to manipulate data for display (including filtering,
sorting etc) without altering the underlying data for the table, use this
property. `render` can be considered to be the the read only companion to
`data` which is read / write (then as such more complex). Like `data`
this option can be given in a number of different ways to effect its
behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object.
* `object` - use different data for the different data types requested by
  DataTables ('filter', 'display', 'type' or 'sort'). The property names
  of the object is the data type the property refers to and the value can
  defined using an integer, string or function using the same rules as
  `render` normally does. Note that an `_` option _must_ be specified.
  This is the default value to use if you haven't specified a value for
  the data type requested by DataTables.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * {array|object} The data source for the row (based on `data`)
     * {string} The type call data requested - this will be 'filter',
       'display', 'type' or 'sort'.
     * {array|object} The full data source for the row (not based on
       `data`)
   * Return:
     * The return value from the function is what will be used for the
       data requested.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">object</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null Use the data source value.</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12019">line 12019</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Create a comma separated list from an array of objects
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         {
           "data": "platform",
           "render": "[, ].name"
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Execute a function to obtain data
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": "browserName()"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// As an object, extracting different data for the different types
   // This would be used with a data source such as:
   //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
   // (which has both forms) is used for filtering for if a user inputs either format, while
   // the formatted phone number is the one that is shown in the table.
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": {
           "_": "phone",
           "filter": "phone_filter",
           "display": "phone_display"
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Use as a function to create a link from the data source
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "download_link",
         "render": function ( data, type, full ) {
           return '&lt;a href="'+data+'">Download&lt;/a>';
         }
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".render"><span class="type-signature">(static) </span>render<span class="type-signature"> :string|int|function|object|null</span></h4>




<div class="description">
    This property is the rendering partner to `data` and it is suggested that
when you want to manipulate data for display (including filtering,
sorting etc) without altering the underlying data for the table, use this
property. `render` can be considered to be the the read only companion to
`data` which is read / write (then as such more complex). Like `data`
this option can be given in a number of different ways to effect its
behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object.
* `object` - use different data for the different data types requested by
  DataTables ('filter', 'display', 'type' or 'sort'). The property names
  of the object is the data type the property refers to and the value can
  defined using an integer, string or function using the same rules as
  `render` normally does. Note that an `_` option _must_ be specified.
  This is the default value to use if you haven't specified a value for
  the data type requested by DataTables.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * {array|object} The data source for the row (based on `data`)
     * {string} The type call data requested - this will be 'filter',
       'display', 'type' or 'sort'.
     * {array|object} The full data source for the row (not based on
       `data`)
   * Return:
     * The return value from the function is what will be used for the
       data requested.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">object</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null Use the data source value.</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12019">line 12019</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Create a comma separated list from an array of objects
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         {
           "data": "platform",
           "render": "[, ].name"
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Execute a function to obtain data
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": "browserName()"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// As an object, extracting different data for the different types
   // This would be used with a data source such as:
   //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
   // (which has both forms) is used for filtering for if a user inputs either format, while
   // the formatted phone number is the one that is shown in the table.
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": {
           "_": "phone",
           "filter": "phone_filter",
           "display": "phone_display"
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Use as a function to create a link from the data source
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "download_link",
         "render": function ( data, type, full ) {
           return '&lt;a href="'+data+'">Download&lt;/a>';
         }
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".render"><span class="type-signature">(static) </span>render<span class="type-signature"> :string|int|function|object|null</span></h4>




<div class="description">
    This property is the rendering partner to `data` and it is suggested that
when you want to manipulate data for display (including filtering,
sorting etc) without altering the underlying data for the table, use this
property. `render` can be considered to be the the read only companion to
`data` which is read / write (then as such more complex). Like `data`
this option can be given in a number of different ways to effect its
behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object.
* `object` - use different data for the different data types requested by
  DataTables ('filter', 'display', 'type' or 'sort'). The property names
  of the object is the data type the property refers to and the value can
  defined using an integer, string or function using the same rules as
  `render` normally does. Note that an `_` option _must_ be specified.
  This is the default value to use if you haven't specified a value for
  the data type requested by DataTables.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * {array|object} The data source for the row (based on `data`)
     * {string} The type call data requested - this will be 'filter',
       'display', 'type' or 'sort'.
     * {array|object} The full data source for the row (not based on
       `data`)
   * Return:
     * The return value from the function is what will be used for the
       data requested.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">object</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null Use the data source value.</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12019">line 12019</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Create a comma separated list from an array of objects
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         {
           "data": "platform",
           "render": "[, ].name"
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Execute a function to obtain data
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": "browserName()"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// As an object, extracting different data for the different types
   // This would be used with a data source such as:
   //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
   // (which has both forms) is used for filtering for if a user inputs either format, while
   // the formatted phone number is the one that is shown in the table.
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": {
           "_": "phone",
           "filter": "phone_filter",
           "display": "phone_display"
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Use as a function to create a link from the data source
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "download_link",
         "render": function ( data, type, full ) {
           return '&lt;a href="'+data+'">Download&lt;/a>';
         }
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".searchable"><span class="type-signature">(static) </span>searchable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable filtering on the data in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11707">line 11707</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "searchable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "searchable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".searchable"><span class="type-signature">(static) </span>searchable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable filtering on the data in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11707">line 11707</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "searchable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "searchable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".searchable"><span class="type-signature">(static) </span>searchable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable filtering on the data in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11707">line 11707</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "searchable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "searchable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".title"><span class="type-signature">(static) </span>title<span class="type-signature"> :string</span></h4>




<div class="description">
    The title of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Derived from the 'TH' value for this column in the
   original HTML table.</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12362">line 12362</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "title": "My column title", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "title": "My column title" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".title"><span class="type-signature">(static) </span>title<span class="type-signature"> :string</span></h4>




<div class="description">
    The title of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Derived from the 'TH' value for this column in the
   original HTML table.</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12362">line 12362</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "title": "My column title", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "title": "My column title" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".title"><span class="type-signature">(static) </span>title<span class="type-signature"> :string</span></h4>




<div class="description">
    The title of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Derived from the 'TH' value for this column in the
   original HTML table.</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12362">line 12362</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "title": "My column title", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "title": "My column title" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".type"><span class="type-signature">(static) </span>type<span class="type-signature"> :string</span></h4>




<div class="description">
    The type allows you to specify how the data for this column will be
ordered. Four types (string, numeric, date and html (which will strip
HTML tags before ordering)) are currently available. Note that only date
formats understood by Javascript's Date() object will be accepted as type
date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
'numeric', 'date' or 'html' (by default). Further types can be adding
through plug-ins.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Auto-detected from raw data</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12398">line 12398</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "type": "html", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "type": "html" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".type"><span class="type-signature">(static) </span>type<span class="type-signature"> :string</span></h4>




<div class="description">
    The type allows you to specify how the data for this column will be
ordered. Four types (string, numeric, date and html (which will strip
HTML tags before ordering)) are currently available. Note that only date
formats understood by Javascript's Date() object will be accepted as type
date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
'numeric', 'date' or 'html' (by default). Further types can be adding
through plug-ins.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Auto-detected from raw data</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12398">line 12398</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "type": "html", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "type": "html" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".type"><span class="type-signature">(static) </span>type<span class="type-signature"> :string</span></h4>




<div class="description">
    The type allows you to specify how the data for this column will be
ordered. Four types (string, numeric, date and html (which will strip
HTML tags before ordering)) are currently available. Note that only date
formats understood by Javascript's Date() object will be accepted as type
date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
'numeric', 'date' or 'html' (by default). Further types can be adding
through plug-ins.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Auto-detected from raw data</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12398">line 12398</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "type": "html", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "type": "html" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".visible"><span class="type-signature">(static) </span>visible<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable the display of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11773">line 11773</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "visible": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "visible": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".visible"><span class="type-signature">(static) </span>visible<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable the display of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11773">line 11773</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "visible": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "visible": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".visible"><span class="type-signature">(static) </span>visible<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable the display of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11773">line 11773</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "visible": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "visible": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".width"><span class="type-signature">(static) </span>width<span class="type-signature"> :string</span></h4>




<div class="description">
    Defining the width of the column, this parameter may take any CSS value
(3em, 20px etc). DataTables applies 'smart' widths to columns which have not
been given a specific width through this interface ensuring that the table
remains readable.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Automatic</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12439">line 12439</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "width": "20%", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "width": "20%" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".width"><span class="type-signature">(static) </span>width<span class="type-signature"> :string</span></h4>




<div class="description">
    Defining the width of the column, this parameter may take any CSS value
(3em, 20px etc). DataTables applies 'smart' widths to columns which have not
been given a specific width through this interface ensuring that the table
remains readable.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Automatic</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12439">line 12439</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "width": "20%", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "width": "20%" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".width"><span class="type-signature">(static) </span>width<span class="type-signature"> :string</span></h4>




<div class="description">
    Defining the width of the column, this parameter may take any CSS value
(3em, 20px etc). DataTables applies 'smart' widths to columns which have not
been given a specific width through this interface ensuring that the table
remains readable.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Automatic</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12439">line 12439</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "width": "20%", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "width": "20%" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
    

    

    

    
</article>

</section>







<section>

<header>
    
        <h2>
            <span class="ancestors"><a href="DataTable.defaults.html">.defaults</a>.</span>column</h2>
        
    
</header>

<article>
    <div class="container-overview">
    
        
            <div class="description">Column options that can be given to DataTables at initialisation time.</div>
        

        


<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11625">line 11625</a>
    </li></ul></dd>
    

    

    

    
</dl>


        
    
    </div>

    

    

    

    

    

    

    
        <h3 class="subsection-title">Members</h3>

        
            
<h4 class="name" id=".cellType"><span class="type-signature">(static) </span>cellType<span class="type-signature"> :string</span></h4>




<div class="description">
    Change the cell type created for the column - either TD cells or TH cells. This
can be useful as TH cells have semantic meaning in the table body, allowing them
to act as a header for a row (you may wish to add scope='row' to the TH elements).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>td</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12141">line 12141</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Make the first column use TH cells
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "cellType": "th"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".cellType"><span class="type-signature">(static) </span>cellType<span class="type-signature"> :string</span></h4>




<div class="description">
    Change the cell type created for the column - either TD cells or TH cells. This
can be useful as TH cells have semantic meaning in the table body, allowing them
to act as a header for a row (you may wish to add scope='row' to the TH elements).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>td</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12141">line 12141</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Make the first column use TH cells
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "cellType": "th"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".cellType"><span class="type-signature">(static) </span>cellType<span class="type-signature"> :string</span></h4>




<div class="description">
    Change the cell type created for the column - either TD cells or TH cells. This
can be useful as TH cells have semantic meaning in the table body, allowing them
to act as a header for a row (you may wish to add scope='row' to the TH elements).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>td</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12141">line 12141</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Make the first column use TH cells
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "cellType": "th"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".class"><span class="type-signature">(static) </span>class<span class="type-signature"> :string</span></h4>




<div class="description">
    Class to give to each cell in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12165">line 12165</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "class": "my_class", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "class": "my_class" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".class"><span class="type-signature">(static) </span>class<span class="type-signature"> :string</span></h4>




<div class="description">
    Class to give to each cell in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12165">line 12165</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "class": "my_class", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "class": "my_class" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".class"><span class="type-signature">(static) </span>class<span class="type-signature"> :string</span></h4>




<div class="description">
    Class to give to each cell in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12165">line 12165</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "class": "my_class", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "class": "my_class" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".contentPadding"><span class="type-signature">(static) </span>contentPadding<span class="type-signature"> :string</span></h4>




<div class="description">
    When DataTables calculates the column widths to assign to each column,
it finds the longest string in each column and then constructs a
temporary table and reads the widths from that. The problem with this
is that "mmm" is much wider then "iiii", but the latter is a longer
string - thus the calculation can go wrong (doing it properly and putting
it into an DOM object and measuring that is horribly(!) slow). Thus as
a "work around" we provide this option. It will append its value to the
text that is found to be the longest string for the column - i.e. padding.
Generally you shouldn't need this!
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string<i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12199">line 12199</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "contentPadding": "mmm"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".contentPadding"><span class="type-signature">(static) </span>contentPadding<span class="type-signature"> :string</span></h4>




<div class="description">
    When DataTables calculates the column widths to assign to each column,
it finds the longest string in each column and then constructs a
temporary table and reads the widths from that. The problem with this
is that "mmm" is much wider then "iiii", but the latter is a longer
string - thus the calculation can go wrong (doing it properly and putting
it into an DOM object and measuring that is horribly(!) slow). Thus as
a "work around" we provide this option. It will append its value to the
text that is found to be the longest string for the column - i.e. padding.
Generally you shouldn't need this!
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string<i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12199">line 12199</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "contentPadding": "mmm"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".contentPadding"><span class="type-signature">(static) </span>contentPadding<span class="type-signature"> :string</span></h4>




<div class="description">
    When DataTables calculates the column widths to assign to each column,
it finds the longest string in each column and then constructs a
temporary table and reads the widths from that. The problem with this
is that "mmm" is much wider then "iiii", but the latter is a longer
string - thus the calculation can go wrong (doing it properly and putting
it into an DOM object and measuring that is horribly(!) slow). Thus as
a "work around" we provide this option. It will append its value to the
text that is found to be the longest string for the column - i.e. padding.
Generally you shouldn't need this!
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string<i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12199">line 12199</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "contentPadding": "mmm"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".createdCell"><span class="type-signature">(static) </span>createdCell<span class="type-signature"> :function</span></h4>




<div class="description">
    Developer definable function that is called whenever a cell is created (Ajax source,
etc) or processed for input (DOM source). This can be used as a compliment to mRender
allowing you to modify the DOM element (add background colour for example) when the
element is available.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">function</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11806">line 11806</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>$(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [3],
         "createdCell": function (td, cellData, rowData, row, col) {
           if ( cellData == "1.7" ) {
             $(td).css('color', 'blue')
           }
         }
       } ]
     });
   } );</code></pre>



        
            
<h4 class="name" id=".createdCell"><span class="type-signature">(static) </span>createdCell<span class="type-signature"> :function</span></h4>




<div class="description">
    Developer definable function that is called whenever a cell is created (Ajax source,
etc) or processed for input (DOM source). This can be used as a compliment to mRender
allowing you to modify the DOM element (add background colour for example) when the
element is available.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">function</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11806">line 11806</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>$(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [3],
         "createdCell": function (td, cellData, rowData, row, col) {
           if ( cellData == "1.7" ) {
             $(td).css('color', 'blue')
           }
         }
       } ]
     });
   } );</code></pre>



        
            
<h4 class="name" id=".createdCell"><span class="type-signature">(static) </span>createdCell<span class="type-signature"> :function</span></h4>




<div class="description">
    Developer definable function that is called whenever a cell is created (Ajax source,
etc) or processed for input (DOM source). This can be used as a compliment to mRender
allowing you to modify the DOM element (add background colour for example) when the
element is available.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">function</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11806">line 11806</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>$(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [3],
         "createdCell": function (td, cellData, rowData, row, col) {
           if ( cellData == "1.7" ) {
             $(td).css('color', 'blue')
           }
         }
       } ]
     });
   } );</code></pre>



        
            
<h4 class="name" id=".data"><span class="type-signature">(static) </span>data<span class="type-signature"> :string|int|function|null</span></h4>




<div class="description">
    This property can be used to read data from any data source property,
including deeply nested objects / properties. `data` can be given in a
number of different ways which effect its behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object. Note that
     function notation is recommended for use in `render` rather than
     `data` as it is much simpler to use as a renderer.
* `null` - use the original data source for the row rather than plucking
  data directly from it. This action has effects on two other
  initialisation options:
   * `defaultContent` - When null is given as the `data` option and
     `defaultContent` is specified for the column, the value defined by
     `defaultContent` will be used for the cell.
   * `render` - When null is used for the `data` option and the `render`
     option is specified for the column, the whole data source for the
     row is used for the renderer.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * `{array|object}` The data source for the row
     * `{string}` The type call data requested - this will be 'set' when
       setting data or 'filter', 'display', 'type', 'sort' or undefined
       when gathering data. Note that when `undefined` is given for the
       type DataTables expects to get the raw data for the object back<
     * `{*}` Data to set when the second parameter is 'set'.
   * Return:
     * The return value from the function is not required when 'set' is
       the type of call, but otherwise the return is what will be used
       for the data requested.

Note that `data` is a getter and setter option. If you just require
formatting of data for output, you will likely want to use `render` which
is simply a getter and thus simpler to use.

Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
name change reflects the flexibility of this property and is consistent
with the naming of mRender. If 'mDataProp' is given, then it will still
be used by DataTables, as it automatically maps the old name to the new
if required.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Use automatically calculated column index</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11847">line 11847</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Read table data from objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {value},
   //      "version": {value},
   //      "grade": {value}
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/objects.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform" },
         { "data": "version" },
         { "data": "grade" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Read information from deeply nested objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {
   //         "inner": {value}
   //      },
   //      "details": [
   //         {value}, {value}
   //      ]
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform.inner" },
         { "data": "platform.details.0" },
         { "data": "platform.details.1" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `data` as a function to provide different information for
   // sorting, filtering and display. In this case, currency (price)
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": function ( source, type, val ) {
           if (type === 'set') {
             source.price = val;
             // Store the computed dislay and filter values for efficiency
             source.price_display = val=="" ? "" : "$"+numberFormat(val);
             source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             return;
           }
           else if (type === 'display') {
             return source.price_display;
           }
           else if (type === 'filter') {
             return source.price_filter;
           }
           // 'sort', 'type' and undefined all just use the integer
           return source.price;
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using default content
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null,
         "defaultContent": "Click to edit"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using array notation - outputting a list from an array
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "name[, ]"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".data"><span class="type-signature">(static) </span>data<span class="type-signature"> :string|int|function|null</span></h4>




<div class="description">
    This property can be used to read data from any data source property,
including deeply nested objects / properties. `data` can be given in a
number of different ways which effect its behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object. Note that
     function notation is recommended for use in `render` rather than
     `data` as it is much simpler to use as a renderer.
* `null` - use the original data source for the row rather than plucking
  data directly from it. This action has effects on two other
  initialisation options:
   * `defaultContent` - When null is given as the `data` option and
     `defaultContent` is specified for the column, the value defined by
     `defaultContent` will be used for the cell.
   * `render` - When null is used for the `data` option and the `render`
     option is specified for the column, the whole data source for the
     row is used for the renderer.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * `{array|object}` The data source for the row
     * `{string}` The type call data requested - this will be 'set' when
       setting data or 'filter', 'display', 'type', 'sort' or undefined
       when gathering data. Note that when `undefined` is given for the
       type DataTables expects to get the raw data for the object back<
     * `{*}` Data to set when the second parameter is 'set'.
   * Return:
     * The return value from the function is not required when 'set' is
       the type of call, but otherwise the return is what will be used
       for the data requested.

Note that `data` is a getter and setter option. If you just require
formatting of data for output, you will likely want to use `render` which
is simply a getter and thus simpler to use.

Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
name change reflects the flexibility of this property and is consistent
with the naming of mRender. If 'mDataProp' is given, then it will still
be used by DataTables, as it automatically maps the old name to the new
if required.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Use automatically calculated column index</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11847">line 11847</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Read table data from objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {value},
   //      "version": {value},
   //      "grade": {value}
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/objects.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform" },
         { "data": "version" },
         { "data": "grade" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Read information from deeply nested objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {
   //         "inner": {value}
   //      },
   //      "details": [
   //         {value}, {value}
   //      ]
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform.inner" },
         { "data": "platform.details.0" },
         { "data": "platform.details.1" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `data` as a function to provide different information for
   // sorting, filtering and display. In this case, currency (price)
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": function ( source, type, val ) {
           if (type === 'set') {
             source.price = val;
             // Store the computed dislay and filter values for efficiency
             source.price_display = val=="" ? "" : "$"+numberFormat(val);
             source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             return;
           }
           else if (type === 'display') {
             return source.price_display;
           }
           else if (type === 'filter') {
             return source.price_filter;
           }
           // 'sort', 'type' and undefined all just use the integer
           return source.price;
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using default content
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null,
         "defaultContent": "Click to edit"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using array notation - outputting a list from an array
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "name[, ]"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".data"><span class="type-signature">(static) </span>data<span class="type-signature"> :string|int|function|null</span></h4>




<div class="description">
    This property can be used to read data from any data source property,
including deeply nested objects / properties. `data` can be given in a
number of different ways which effect its behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object. Note that
     function notation is recommended for use in `render` rather than
     `data` as it is much simpler to use as a renderer.
* `null` - use the original data source for the row rather than plucking
  data directly from it. This action has effects on two other
  initialisation options:
   * `defaultContent` - When null is given as the `data` option and
     `defaultContent` is specified for the column, the value defined by
     `defaultContent` will be used for the cell.
   * `render` - When null is used for the `data` option and the `render`
     option is specified for the column, the whole data source for the
     row is used for the renderer.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * `{array|object}` The data source for the row
     * `{string}` The type call data requested - this will be 'set' when
       setting data or 'filter', 'display', 'type', 'sort' or undefined
       when gathering data. Note that when `undefined` is given for the
       type DataTables expects to get the raw data for the object back<
     * `{*}` Data to set when the second parameter is 'set'.
   * Return:
     * The return value from the function is not required when 'set' is
       the type of call, but otherwise the return is what will be used
       for the data requested.

Note that `data` is a getter and setter option. If you just require
formatting of data for output, you will likely want to use `render` which
is simply a getter and thus simpler to use.

Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
name change reflects the flexibility of this property and is consistent
with the naming of mRender. If 'mDataProp' is given, then it will still
be used by DataTables, as it automatically maps the old name to the new
if required.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Use automatically calculated column index</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11847">line 11847</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Read table data from objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {value},
   //      "version": {value},
   //      "grade": {value}
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/objects.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform" },
         { "data": "version" },
         { "data": "grade" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Read information from deeply nested objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {
   //         "inner": {value}
   //      },
   //      "details": [
   //         {value}, {value}
   //      ]
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform.inner" },
         { "data": "platform.details.0" },
         { "data": "platform.details.1" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `data` as a function to provide different information for
   // sorting, filtering and display. In this case, currency (price)
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": function ( source, type, val ) {
           if (type === 'set') {
             source.price = val;
             // Store the computed dislay and filter values for efficiency
             source.price_display = val=="" ? "" : "$"+numberFormat(val);
             source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             return;
           }
           else if (type === 'display') {
             return source.price_display;
           }
           else if (type === 'filter') {
             return source.price_filter;
           }
           // 'sort', 'type' and undefined all just use the integer
           return source.price;
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using default content
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null,
         "defaultContent": "Click to edit"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using array notation - outputting a list from an array
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "name[, ]"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".dataProp"><span class="type-signature">(static) </span>dataProp<span class="type-signature"></span></h4>




<div class="description">
    This parameter has been replaced by `data` in DataTables to ensure naming
consistency. `dataProp` can still be used, as there is backwards
compatibility in DataTables for this option, but it is strongly
recommended that you use `data` in preference to `dataProp`.
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11838">line 11838</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id=".dataProp"><span class="type-signature">(static) </span>dataProp<span class="type-signature"></span></h4>




<div class="description">
    This parameter has been replaced by `data` in DataTables to ensure naming
consistency. `dataProp` can still be used, as there is backwards
compatibility in DataTables for this option, but it is strongly
recommended that you use `data` in preference to `dataProp`.
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11838">line 11838</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id=".dataProp"><span class="type-signature">(static) </span>dataProp<span class="type-signature"></span></h4>




<div class="description">
    This parameter has been replaced by `data` in DataTables to ensure naming
consistency. `dataProp` can still be used, as there is backwards
compatibility in DataTables for this option, but it is strongly
recommended that you use `data` in preference to `dataProp`.
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11838">line 11838</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id=".defaultContent"><span class="type-signature">(static) </span>defaultContent<span class="type-signature"> :string</span></h4>




<div class="description">
    Allows a default value to be given for a column's data, and will be used
whenever a null data source is encountered (this can be because `data`
is set to null, or because the data source itself is null).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12233">line 12233</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         {
           "data": null,
           "defaultContent": "Edit",
           "targets": [ -1 ]
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "data": null,
           "defaultContent": "Edit"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".defaultContent"><span class="type-signature">(static) </span>defaultContent<span class="type-signature"> :string</span></h4>




<div class="description">
    Allows a default value to be given for a column's data, and will be used
whenever a null data source is encountered (this can be because `data`
is set to null, or because the data source itself is null).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12233">line 12233</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         {
           "data": null,
           "defaultContent": "Edit",
           "targets": [ -1 ]
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "data": null,
           "defaultContent": "Edit"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".defaultContent"><span class="type-signature">(static) </span>defaultContent<span class="type-signature"> :string</span></h4>




<div class="description">
    Allows a default value to be given for a column's data, and will be used
whenever a null data source is encountered (this can be because `data`
is set to null, or because the data source itself is null).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12233">line 12233</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         {
           "data": null,
           "defaultContent": "Edit",
           "targets": [ -1 ]
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "data": null,
           "defaultContent": "Edit"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".name"><span class="type-signature">(static) </span>name<span class="type-signature"> :string</span></h4>




<div class="description">
    This parameter is only used in DataTables' server-side processing. It can
be exceptionally useful to know what columns are being displayed on the
client side, and to map these to database fields. When defined, the names
also allow DataTables to reorder information from the server if it comes
back in an unexpected order (i.e. if you switch your columns around on the
client-side, your server-side code does not also need updating).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12276">line 12276</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "name": "engine", "targets": [ 0 ] },
         { "name": "browser", "targets": [ 1 ] },
         { "name": "platform", "targets": [ 2 ] },
         { "name": "version", "targets": [ 3 ] },
         { "name": "grade", "targets": [ 4 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "name": "engine" },
         { "name": "browser" },
         { "name": "platform" },
         { "name": "version" },
         { "name": "grade" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".name"><span class="type-signature">(static) </span>name<span class="type-signature"> :string</span></h4>




<div class="description">
    This parameter is only used in DataTables' server-side processing. It can
be exceptionally useful to know what columns are being displayed on the
client side, and to map these to database fields. When defined, the names
also allow DataTables to reorder information from the server if it comes
back in an unexpected order (i.e. if you switch your columns around on the
client-side, your server-side code does not also need updating).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12276">line 12276</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "name": "engine", "targets": [ 0 ] },
         { "name": "browser", "targets": [ 1 ] },
         { "name": "platform", "targets": [ 2 ] },
         { "name": "version", "targets": [ 3 ] },
         { "name": "grade", "targets": [ 4 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "name": "engine" },
         { "name": "browser" },
         { "name": "platform" },
         { "name": "version" },
         { "name": "grade" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".name"><span class="type-signature">(static) </span>name<span class="type-signature"> :string</span></h4>




<div class="description">
    This parameter is only used in DataTables' server-side processing. It can
be exceptionally useful to know what columns are being displayed on the
client side, and to map these to database fields. When defined, the names
also allow DataTables to reorder information from the server if it comes
back in an unexpected order (i.e. if you switch your columns around on the
client-side, your server-side code does not also need updating).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12276">line 12276</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "name": "engine", "targets": [ 0 ] },
         { "name": "browser", "targets": [ 1 ] },
         { "name": "platform", "targets": [ 2 ] },
         { "name": "version", "targets": [ 3 ] },
         { "name": "grade", "targets": [ 4 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "name": "engine" },
         { "name": "browser" },
         { "name": "platform" },
         { "name": "version" },
         { "name": "grade" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderable"><span class="type-signature">(static) </span>orderable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable ordering on this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11740">line 11740</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderable"><span class="type-signature">(static) </span>orderable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable ordering on this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11740">line 11740</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderable"><span class="type-signature">(static) </span>orderable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable ordering on this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11740">line 11740</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderData"><span class="type-signature">(static) </span>orderData<span class="type-signature"> :array|int</span></h4>




<div class="description">
    Define which column(s) an order will occur on for this column. This
allows a column's ordering to take multiple columns into account when
doing a sort or use the data from a different column. For example first
name / last name columns make sense to do a multi-column sort over the
two columns.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>
|

<span class="param-type">int</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Takes the value of the column index automatically</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11626">line 11626</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderData": [ 0, 1 ], "targets": [ 0 ] },
         { "orderData": [ 1, 0 ], "targets": [ 1 ] },
         { "orderData": 2, "targets": [ 2 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderData": [ 0, 1 ] },
         { "orderData": [ 1, 0 ] },
         { "orderData": 2 },
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderData"><span class="type-signature">(static) </span>orderData<span class="type-signature"> :array|int</span></h4>




<div class="description">
    Define which column(s) an order will occur on for this column. This
allows a column's ordering to take multiple columns into account when
doing a sort or use the data from a different column. For example first
name / last name columns make sense to do a multi-column sort over the
two columns.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>
|

<span class="param-type">int</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Takes the value of the column index automatically</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11626">line 11626</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderData": [ 0, 1 ], "targets": [ 0 ] },
         { "orderData": [ 1, 0 ], "targets": [ 1 ] },
         { "orderData": 2, "targets": [ 2 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderData": [ 0, 1 ] },
         { "orderData": [ 1, 0 ] },
         { "orderData": 2 },
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderData"><span class="type-signature">(static) </span>orderData<span class="type-signature"> :array|int</span></h4>




<div class="description">
    Define which column(s) an order will occur on for this column. This
allows a column's ordering to take multiple columns into account when
doing a sort or use the data from a different column. For example first
name / last name columns make sense to do a multi-column sort over the
two columns.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>
|

<span class="param-type">int</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Takes the value of the column index automatically</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11626">line 11626</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderData": [ 0, 1 ], "targets": [ 0 ] },
         { "orderData": [ 1, 0 ], "targets": [ 1 ] },
         { "orderData": 2, "targets": [ 2 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderData": [ 0, 1 ] },
         { "orderData": [ 1, 0 ] },
         { "orderData": 2 },
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderDataType"><span class="type-signature">(static) </span>orderDataType<span class="type-signature"> :string</span></h4>




<div class="description">
    Defines a data source type for the ordering which can be used to read
real-time information from the table (updating the internally cached
version) prior to ordering. This allows ordering to occur on user
editable elements such as form inputs.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>std</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12320">line 12320</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
         { "type": "numeric", "targets": [ 3 ] },
         { "orderDataType": "dom-select", "targets": [ 4 ] },
         { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         { "orderDataType": "dom-text" },
         { "orderDataType": "dom-text", "type": "numeric" },
         { "orderDataType": "dom-select" },
         { "orderDataType": "dom-checkbox" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderDataType"><span class="type-signature">(static) </span>orderDataType<span class="type-signature"> :string</span></h4>




<div class="description">
    Defines a data source type for the ordering which can be used to read
real-time information from the table (updating the internally cached
version) prior to ordering. This allows ordering to occur on user
editable elements such as form inputs.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>std</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12320">line 12320</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
         { "type": "numeric", "targets": [ 3 ] },
         { "orderDataType": "dom-select", "targets": [ 4 ] },
         { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         { "orderDataType": "dom-text" },
         { "orderDataType": "dom-text", "type": "numeric" },
         { "orderDataType": "dom-select" },
         { "orderDataType": "dom-checkbox" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderDataType"><span class="type-signature">(static) </span>orderDataType<span class="type-signature"> :string</span></h4>




<div class="description">
    Defines a data source type for the ordering which can be used to read
real-time information from the table (updating the internally cached
version) prior to ordering. This allows ordering to occur on user
editable elements such as form inputs.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>std</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12320">line 12320</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
         { "type": "numeric", "targets": [ 3 ] },
         { "orderDataType": "dom-select", "targets": [ 4 ] },
         { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         { "orderDataType": "dom-text" },
         { "orderDataType": "dom-text", "type": "numeric" },
         { "orderDataType": "dom-select" },
         { "orderDataType": "dom-checkbox" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderSequence"><span class="type-signature">(static) </span>orderSequence<span class="type-signature"> :array</span></h4>




<div class="description">
    You can control the default ordering direction, and even alter the
behaviour of the sort handler (i.e. only allow ascending ordering etc)
using this parameter.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>[ 'asc', 'desc' ]</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11668">line 11668</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderSequence": [ "asc" ], "targets": [ 1 ] },
         { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
         { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         { "orderSequence": [ "asc" ] },
         { "orderSequence": [ "desc", "asc", "asc" ] },
         { "orderSequence": [ "desc" ] },
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderSequence"><span class="type-signature">(static) </span>orderSequence<span class="type-signature"> :array</span></h4>




<div class="description">
    You can control the default ordering direction, and even alter the
behaviour of the sort handler (i.e. only allow ascending ordering etc)
using this parameter.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>[ 'asc', 'desc' ]</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11668">line 11668</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderSequence": [ "asc" ], "targets": [ 1 ] },
         { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
         { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         { "orderSequence": [ "asc" ] },
         { "orderSequence": [ "desc", "asc", "asc" ] },
         { "orderSequence": [ "desc" ] },
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderSequence"><span class="type-signature">(static) </span>orderSequence<span class="type-signature"> :array</span></h4>




<div class="description">
    You can control the default ordering direction, and even alter the
behaviour of the sort handler (i.e. only allow ascending ordering etc)
using this parameter.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>[ 'asc', 'desc' ]</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11668">line 11668</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderSequence": [ "asc" ], "targets": [ 1 ] },
         { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
         { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         { "orderSequence": [ "asc" ] },
         { "orderSequence": [ "desc", "asc", "asc" ] },
         { "orderSequence": [ "desc" ] },
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".render"><span class="type-signature">(static) </span>render<span class="type-signature"> :string|int|function|object|null</span></h4>




<div class="description">
    This property is the rendering partner to `data` and it is suggested that
when you want to manipulate data for display (including filtering,
sorting etc) without altering the underlying data for the table, use this
property. `render` can be considered to be the the read only companion to
`data` which is read / write (then as such more complex). Like `data`
this option can be given in a number of different ways to effect its
behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object.
* `object` - use different data for the different data types requested by
  DataTables ('filter', 'display', 'type' or 'sort'). The property names
  of the object is the data type the property refers to and the value can
  defined using an integer, string or function using the same rules as
  `render` normally does. Note that an `_` option _must_ be specified.
  This is the default value to use if you haven't specified a value for
  the data type requested by DataTables.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * {array|object} The data source for the row (based on `data`)
     * {string} The type call data requested - this will be 'filter',
       'display', 'type' or 'sort'.
     * {array|object} The full data source for the row (not based on
       `data`)
   * Return:
     * The return value from the function is what will be used for the
       data requested.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">object</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null Use the data source value.</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12019">line 12019</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Create a comma separated list from an array of objects
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         {
           "data": "platform",
           "render": "[, ].name"
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Execute a function to obtain data
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": "browserName()"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// As an object, extracting different data for the different types
   // This would be used with a data source such as:
   //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
   // (which has both forms) is used for filtering for if a user inputs either format, while
   // the formatted phone number is the one that is shown in the table.
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": {
           "_": "phone",
           "filter": "phone_filter",
           "display": "phone_display"
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Use as a function to create a link from the data source
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "download_link",
         "render": function ( data, type, full ) {
           return '&lt;a href="'+data+'">Download&lt;/a>';
         }
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".render"><span class="type-signature">(static) </span>render<span class="type-signature"> :string|int|function|object|null</span></h4>




<div class="description">
    This property is the rendering partner to `data` and it is suggested that
when you want to manipulate data for display (including filtering,
sorting etc) without altering the underlying data for the table, use this
property. `render` can be considered to be the the read only companion to
`data` which is read / write (then as such more complex). Like `data`
this option can be given in a number of different ways to effect its
behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object.
* `object` - use different data for the different data types requested by
  DataTables ('filter', 'display', 'type' or 'sort'). The property names
  of the object is the data type the property refers to and the value can
  defined using an integer, string or function using the same rules as
  `render` normally does. Note that an `_` option _must_ be specified.
  This is the default value to use if you haven't specified a value for
  the data type requested by DataTables.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * {array|object} The data source for the row (based on `data`)
     * {string} The type call data requested - this will be 'filter',
       'display', 'type' or 'sort'.
     * {array|object} The full data source for the row (not based on
       `data`)
   * Return:
     * The return value from the function is what will be used for the
       data requested.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">object</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null Use the data source value.</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12019">line 12019</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Create a comma separated list from an array of objects
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         {
           "data": "platform",
           "render": "[, ].name"
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Execute a function to obtain data
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": "browserName()"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// As an object, extracting different data for the different types
   // This would be used with a data source such as:
   //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
   // (which has both forms) is used for filtering for if a user inputs either format, while
   // the formatted phone number is the one that is shown in the table.
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": {
           "_": "phone",
           "filter": "phone_filter",
           "display": "phone_display"
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Use as a function to create a link from the data source
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "download_link",
         "render": function ( data, type, full ) {
           return '&lt;a href="'+data+'">Download&lt;/a>';
         }
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".render"><span class="type-signature">(static) </span>render<span class="type-signature"> :string|int|function|object|null</span></h4>




<div class="description">
    This property is the rendering partner to `data` and it is suggested that
when you want to manipulate data for display (including filtering,
sorting etc) without altering the underlying data for the table, use this
property. `render` can be considered to be the the read only companion to
`data` which is read / write (then as such more complex). Like `data`
this option can be given in a number of different ways to effect its
behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object.
* `object` - use different data for the different data types requested by
  DataTables ('filter', 'display', 'type' or 'sort'). The property names
  of the object is the data type the property refers to and the value can
  defined using an integer, string or function using the same rules as
  `render` normally does. Note that an `_` option _must_ be specified.
  This is the default value to use if you haven't specified a value for
  the data type requested by DataTables.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * {array|object} The data source for the row (based on `data`)
     * {string} The type call data requested - this will be 'filter',
       'display', 'type' or 'sort'.
     * {array|object} The full data source for the row (not based on
       `data`)
   * Return:
     * The return value from the function is what will be used for the
       data requested.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">object</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null Use the data source value.</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12019">line 12019</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Create a comma separated list from an array of objects
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         {
           "data": "platform",
           "render": "[, ].name"
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Execute a function to obtain data
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": "browserName()"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// As an object, extracting different data for the different types
   // This would be used with a data source such as:
   //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
   // (which has both forms) is used for filtering for if a user inputs either format, while
   // the formatted phone number is the one that is shown in the table.
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": {
           "_": "phone",
           "filter": "phone_filter",
           "display": "phone_display"
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Use as a function to create a link from the data source
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "download_link",
         "render": function ( data, type, full ) {
           return '&lt;a href="'+data+'">Download&lt;/a>';
         }
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".searchable"><span class="type-signature">(static) </span>searchable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable filtering on the data in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11707">line 11707</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "searchable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "searchable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".searchable"><span class="type-signature">(static) </span>searchable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable filtering on the data in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11707">line 11707</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "searchable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "searchable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".searchable"><span class="type-signature">(static) </span>searchable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable filtering on the data in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11707">line 11707</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "searchable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "searchable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".title"><span class="type-signature">(static) </span>title<span class="type-signature"> :string</span></h4>




<div class="description">
    The title of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Derived from the 'TH' value for this column in the
   original HTML table.</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12362">line 12362</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "title": "My column title", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "title": "My column title" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".title"><span class="type-signature">(static) </span>title<span class="type-signature"> :string</span></h4>




<div class="description">
    The title of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Derived from the 'TH' value for this column in the
   original HTML table.</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12362">line 12362</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "title": "My column title", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "title": "My column title" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".title"><span class="type-signature">(static) </span>title<span class="type-signature"> :string</span></h4>




<div class="description">
    The title of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Derived from the 'TH' value for this column in the
   original HTML table.</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12362">line 12362</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "title": "My column title", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "title": "My column title" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".type"><span class="type-signature">(static) </span>type<span class="type-signature"> :string</span></h4>




<div class="description">
    The type allows you to specify how the data for this column will be
ordered. Four types (string, numeric, date and html (which will strip
HTML tags before ordering)) are currently available. Note that only date
formats understood by Javascript's Date() object will be accepted as type
date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
'numeric', 'date' or 'html' (by default). Further types can be adding
through plug-ins.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Auto-detected from raw data</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12398">line 12398</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "type": "html", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "type": "html" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".type"><span class="type-signature">(static) </span>type<span class="type-signature"> :string</span></h4>




<div class="description">
    The type allows you to specify how the data for this column will be
ordered. Four types (string, numeric, date and html (which will strip
HTML tags before ordering)) are currently available. Note that only date
formats understood by Javascript's Date() object will be accepted as type
date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
'numeric', 'date' or 'html' (by default). Further types can be adding
through plug-ins.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Auto-detected from raw data</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12398">line 12398</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "type": "html", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "type": "html" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".type"><span class="type-signature">(static) </span>type<span class="type-signature"> :string</span></h4>




<div class="description">
    The type allows you to specify how the data for this column will be
ordered. Four types (string, numeric, date and html (which will strip
HTML tags before ordering)) are currently available. Note that only date
formats understood by Javascript's Date() object will be accepted as type
date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
'numeric', 'date' or 'html' (by default). Further types can be adding
through plug-ins.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Auto-detected from raw data</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12398">line 12398</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "type": "html", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "type": "html" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".visible"><span class="type-signature">(static) </span>visible<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable the display of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11773">line 11773</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "visible": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "visible": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".visible"><span class="type-signature">(static) </span>visible<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable the display of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11773">line 11773</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "visible": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "visible": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".visible"><span class="type-signature">(static) </span>visible<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable the display of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11773">line 11773</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "visible": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "visible": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".width"><span class="type-signature">(static) </span>width<span class="type-signature"> :string</span></h4>




<div class="description">
    Defining the width of the column, this parameter may take any CSS value
(3em, 20px etc). DataTables applies 'smart' widths to columns which have not
been given a specific width through this interface ensuring that the table
remains readable.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Automatic</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12439">line 12439</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "width": "20%", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "width": "20%" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".width"><span class="type-signature">(static) </span>width<span class="type-signature"> :string</span></h4>




<div class="description">
    Defining the width of the column, this parameter may take any CSS value
(3em, 20px etc). DataTables applies 'smart' widths to columns which have not
been given a specific width through this interface ensuring that the table
remains readable.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Automatic</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12439">line 12439</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "width": "20%", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "width": "20%" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".width"><span class="type-signature">(static) </span>width<span class="type-signature"> :string</span></h4>




<div class="description">
    Defining the width of the column, this parameter may take any CSS value
(3em, 20px etc). DataTables applies 'smart' widths to columns which have not
been given a specific width through this interface ensuring that the table
remains readable.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Automatic</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12439">line 12439</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "width": "20%", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "width": "20%" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
    

    

    

    
</article>

</section>







<section>

<header>
    
        <h2>
            <span class="ancestors"><a href="DataTable.defaults.html">.defaults</a>.</span>column</h2>
        
    
</header>

<article>
    <div class="container-overview">
    
        
            <div class="description">Column options that can be given to DataTables at initialisation time.</div>
        

        


<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11625">line 11625</a>
    </li></ul></dd>
    

    

    

    
</dl>


        
    
    </div>

    

    

    

    

    

    

    
        <h3 class="subsection-title">Members</h3>

        
            
<h4 class="name" id=".cellType"><span class="type-signature">(static) </span>cellType<span class="type-signature"> :string</span></h4>




<div class="description">
    Change the cell type created for the column - either TD cells or TH cells. This
can be useful as TH cells have semantic meaning in the table body, allowing them
to act as a header for a row (you may wish to add scope='row' to the TH elements).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>td</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12141">line 12141</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Make the first column use TH cells
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "cellType": "th"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".cellType"><span class="type-signature">(static) </span>cellType<span class="type-signature"> :string</span></h4>




<div class="description">
    Change the cell type created for the column - either TD cells or TH cells. This
can be useful as TH cells have semantic meaning in the table body, allowing them
to act as a header for a row (you may wish to add scope='row' to the TH elements).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>td</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12141">line 12141</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Make the first column use TH cells
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "cellType": "th"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".cellType"><span class="type-signature">(static) </span>cellType<span class="type-signature"> :string</span></h4>




<div class="description">
    Change the cell type created for the column - either TD cells or TH cells. This
can be useful as TH cells have semantic meaning in the table body, allowing them
to act as a header for a row (you may wish to add scope='row' to the TH elements).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>td</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12141">line 12141</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Make the first column use TH cells
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "cellType": "th"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".class"><span class="type-signature">(static) </span>class<span class="type-signature"> :string</span></h4>




<div class="description">
    Class to give to each cell in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12165">line 12165</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "class": "my_class", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "class": "my_class" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".class"><span class="type-signature">(static) </span>class<span class="type-signature"> :string</span></h4>




<div class="description">
    Class to give to each cell in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12165">line 12165</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "class": "my_class", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "class": "my_class" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".class"><span class="type-signature">(static) </span>class<span class="type-signature"> :string</span></h4>




<div class="description">
    Class to give to each cell in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12165">line 12165</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "class": "my_class", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "class": "my_class" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".contentPadding"><span class="type-signature">(static) </span>contentPadding<span class="type-signature"> :string</span></h4>




<div class="description">
    When DataTables calculates the column widths to assign to each column,
it finds the longest string in each column and then constructs a
temporary table and reads the widths from that. The problem with this
is that "mmm" is much wider then "iiii", but the latter is a longer
string - thus the calculation can go wrong (doing it properly and putting
it into an DOM object and measuring that is horribly(!) slow). Thus as
a "work around" we provide this option. It will append its value to the
text that is found to be the longest string for the column - i.e. padding.
Generally you shouldn't need this!
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string<i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12199">line 12199</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "contentPadding": "mmm"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".contentPadding"><span class="type-signature">(static) </span>contentPadding<span class="type-signature"> :string</span></h4>




<div class="description">
    When DataTables calculates the column widths to assign to each column,
it finds the longest string in each column and then constructs a
temporary table and reads the widths from that. The problem with this
is that "mmm" is much wider then "iiii", but the latter is a longer
string - thus the calculation can go wrong (doing it properly and putting
it into an DOM object and measuring that is horribly(!) slow). Thus as
a "work around" we provide this option. It will append its value to the
text that is found to be the longest string for the column - i.e. padding.
Generally you shouldn't need this!
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string<i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12199">line 12199</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "contentPadding": "mmm"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".contentPadding"><span class="type-signature">(static) </span>contentPadding<span class="type-signature"> :string</span></h4>




<div class="description">
    When DataTables calculates the column widths to assign to each column,
it finds the longest string in each column and then constructs a
temporary table and reads the widths from that. The problem with this
is that "mmm" is much wider then "iiii", but the latter is a longer
string - thus the calculation can go wrong (doing it properly and putting
it into an DOM object and measuring that is horribly(!) slow). Thus as
a "work around" we provide this option. It will append its value to the
text that is found to be the longest string for the column - i.e. padding.
Generally you shouldn't need this!
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string<i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12199">line 12199</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "contentPadding": "mmm"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".createdCell"><span class="type-signature">(static) </span>createdCell<span class="type-signature"> :function</span></h4>




<div class="description">
    Developer definable function that is called whenever a cell is created (Ajax source,
etc) or processed for input (DOM source). This can be used as a compliment to mRender
allowing you to modify the DOM element (add background colour for example) when the
element is available.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">function</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11806">line 11806</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>$(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [3],
         "createdCell": function (td, cellData, rowData, row, col) {
           if ( cellData == "1.7" ) {
             $(td).css('color', 'blue')
           }
         }
       } ]
     });
   } );</code></pre>



        
            
<h4 class="name" id=".createdCell"><span class="type-signature">(static) </span>createdCell<span class="type-signature"> :function</span></h4>




<div class="description">
    Developer definable function that is called whenever a cell is created (Ajax source,
etc) or processed for input (DOM source). This can be used as a compliment to mRender
allowing you to modify the DOM element (add background colour for example) when the
element is available.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">function</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11806">line 11806</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>$(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [3],
         "createdCell": function (td, cellData, rowData, row, col) {
           if ( cellData == "1.7" ) {
             $(td).css('color', 'blue')
           }
         }
       } ]
     });
   } );</code></pre>



        
            
<h4 class="name" id=".createdCell"><span class="type-signature">(static) </span>createdCell<span class="type-signature"> :function</span></h4>




<div class="description">
    Developer definable function that is called whenever a cell is created (Ajax source,
etc) or processed for input (DOM source). This can be used as a compliment to mRender
allowing you to modify the DOM element (add background colour for example) when the
element is available.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">function</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11806">line 11806</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Example</h5>
    
    <pre class="prettyprint"><code>$(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [3],
         "createdCell": function (td, cellData, rowData, row, col) {
           if ( cellData == "1.7" ) {
             $(td).css('color', 'blue')
           }
         }
       } ]
     });
   } );</code></pre>



        
            
<h4 class="name" id=".data"><span class="type-signature">(static) </span>data<span class="type-signature"> :string|int|function|null</span></h4>




<div class="description">
    This property can be used to read data from any data source property,
including deeply nested objects / properties. `data` can be given in a
number of different ways which effect its behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object. Note that
     function notation is recommended for use in `render` rather than
     `data` as it is much simpler to use as a renderer.
* `null` - use the original data source for the row rather than plucking
  data directly from it. This action has effects on two other
  initialisation options:
   * `defaultContent` - When null is given as the `data` option and
     `defaultContent` is specified for the column, the value defined by
     `defaultContent` will be used for the cell.
   * `render` - When null is used for the `data` option and the `render`
     option is specified for the column, the whole data source for the
     row is used for the renderer.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * `{array|object}` The data source for the row
     * `{string}` The type call data requested - this will be 'set' when
       setting data or 'filter', 'display', 'type', 'sort' or undefined
       when gathering data. Note that when `undefined` is given for the
       type DataTables expects to get the raw data for the object back<
     * `{*}` Data to set when the second parameter is 'set'.
   * Return:
     * The return value from the function is not required when 'set' is
       the type of call, but otherwise the return is what will be used
       for the data requested.

Note that `data` is a getter and setter option. If you just require
formatting of data for output, you will likely want to use `render` which
is simply a getter and thus simpler to use.

Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
name change reflects the flexibility of this property and is consistent
with the naming of mRender. If 'mDataProp' is given, then it will still
be used by DataTables, as it automatically maps the old name to the new
if required.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Use automatically calculated column index</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11847">line 11847</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Read table data from objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {value},
   //      "version": {value},
   //      "grade": {value}
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/objects.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform" },
         { "data": "version" },
         { "data": "grade" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Read information from deeply nested objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {
   //         "inner": {value}
   //      },
   //      "details": [
   //         {value}, {value}
   //      ]
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform.inner" },
         { "data": "platform.details.0" },
         { "data": "platform.details.1" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `data` as a function to provide different information for
   // sorting, filtering and display. In this case, currency (price)
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": function ( source, type, val ) {
           if (type === 'set') {
             source.price = val;
             // Store the computed dislay and filter values for efficiency
             source.price_display = val=="" ? "" : "$"+numberFormat(val);
             source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             return;
           }
           else if (type === 'display') {
             return source.price_display;
           }
           else if (type === 'filter') {
             return source.price_filter;
           }
           // 'sort', 'type' and undefined all just use the integer
           return source.price;
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using default content
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null,
         "defaultContent": "Click to edit"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using array notation - outputting a list from an array
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "name[, ]"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".data"><span class="type-signature">(static) </span>data<span class="type-signature"> :string|int|function|null</span></h4>




<div class="description">
    This property can be used to read data from any data source property,
including deeply nested objects / properties. `data` can be given in a
number of different ways which effect its behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object. Note that
     function notation is recommended for use in `render` rather than
     `data` as it is much simpler to use as a renderer.
* `null` - use the original data source for the row rather than plucking
  data directly from it. This action has effects on two other
  initialisation options:
   * `defaultContent` - When null is given as the `data` option and
     `defaultContent` is specified for the column, the value defined by
     `defaultContent` will be used for the cell.
   * `render` - When null is used for the `data` option and the `render`
     option is specified for the column, the whole data source for the
     row is used for the renderer.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * `{array|object}` The data source for the row
     * `{string}` The type call data requested - this will be 'set' when
       setting data or 'filter', 'display', 'type', 'sort' or undefined
       when gathering data. Note that when `undefined` is given for the
       type DataTables expects to get the raw data for the object back<
     * `{*}` Data to set when the second parameter is 'set'.
   * Return:
     * The return value from the function is not required when 'set' is
       the type of call, but otherwise the return is what will be used
       for the data requested.

Note that `data` is a getter and setter option. If you just require
formatting of data for output, you will likely want to use `render` which
is simply a getter and thus simpler to use.

Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
name change reflects the flexibility of this property and is consistent
with the naming of mRender. If 'mDataProp' is given, then it will still
be used by DataTables, as it automatically maps the old name to the new
if required.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Use automatically calculated column index</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11847">line 11847</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Read table data from objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {value},
   //      "version": {value},
   //      "grade": {value}
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/objects.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform" },
         { "data": "version" },
         { "data": "grade" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Read information from deeply nested objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {
   //         "inner": {value}
   //      },
   //      "details": [
   //         {value}, {value}
   //      ]
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform.inner" },
         { "data": "platform.details.0" },
         { "data": "platform.details.1" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `data` as a function to provide different information for
   // sorting, filtering and display. In this case, currency (price)
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": function ( source, type, val ) {
           if (type === 'set') {
             source.price = val;
             // Store the computed dislay and filter values for efficiency
             source.price_display = val=="" ? "" : "$"+numberFormat(val);
             source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             return;
           }
           else if (type === 'display') {
             return source.price_display;
           }
           else if (type === 'filter') {
             return source.price_filter;
           }
           // 'sort', 'type' and undefined all just use the integer
           return source.price;
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using default content
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null,
         "defaultContent": "Click to edit"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using array notation - outputting a list from an array
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "name[, ]"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".data"><span class="type-signature">(static) </span>data<span class="type-signature"> :string|int|function|null</span></h4>




<div class="description">
    This property can be used to read data from any data source property,
including deeply nested objects / properties. `data` can be given in a
number of different ways which effect its behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object. Note that
     function notation is recommended for use in `render` rather than
     `data` as it is much simpler to use as a renderer.
* `null` - use the original data source for the row rather than plucking
  data directly from it. This action has effects on two other
  initialisation options:
   * `defaultContent` - When null is given as the `data` option and
     `defaultContent` is specified for the column, the value defined by
     `defaultContent` will be used for the cell.
   * `render` - When null is used for the `data` option and the `render`
     option is specified for the column, the whole data source for the
     row is used for the renderer.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * `{array|object}` The data source for the row
     * `{string}` The type call data requested - this will be 'set' when
       setting data or 'filter', 'display', 'type', 'sort' or undefined
       when gathering data. Note that when `undefined` is given for the
       type DataTables expects to get the raw data for the object back<
     * `{*}` Data to set when the second parameter is 'set'.
   * Return:
     * The return value from the function is not required when 'set' is
       the type of call, but otherwise the return is what will be used
       for the data requested.

Note that `data` is a getter and setter option. If you just require
formatting of data for output, you will likely want to use `render` which
is simply a getter and thus simpler to use.

Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
name change reflects the flexibility of this property and is consistent
with the naming of mRender. If 'mDataProp' is given, then it will still
be used by DataTables, as it automatically maps the old name to the new
if required.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Use automatically calculated column index</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11847">line 11847</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Read table data from objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {value},
   //      "version": {value},
   //      "grade": {value}
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/objects.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform" },
         { "data": "version" },
         { "data": "grade" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Read information from deeply nested objects
   // JSON structure for each row:
   //   {
   //      "engine": {value},
   //      "browser": {value},
   //      "platform": {
   //         "inner": {value}
   //      },
   //      "details": [
   //         {value}, {value}
   //      ]
   //   }
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         { "data": "platform.inner" },
         { "data": "platform.details.0" },
         { "data": "platform.details.1" }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `data` as a function to provide different information for
   // sorting, filtering and display. In this case, currency (price)
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": function ( source, type, val ) {
           if (type === 'set') {
             source.price = val;
             // Store the computed dislay and filter values for efficiency
             source.price_display = val=="" ? "" : "$"+numberFormat(val);
             source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             return;
           }
           else if (type === 'display') {
             return source.price_display;
           }
           else if (type === 'filter') {
             return source.price_filter;
           }
           // 'sort', 'type' and undefined all just use the integer
           return source.price;
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using default content
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null,
         "defaultContent": "Click to edit"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using array notation - outputting a list from an array
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "name[, ]"
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".dataProp"><span class="type-signature">(static) </span>dataProp<span class="type-signature"></span></h4>




<div class="description">
    This parameter has been replaced by `data` in DataTables to ensure naming
consistency. `dataProp` can still be used, as there is backwards
compatibility in DataTables for this option, but it is strongly
recommended that you use `data` in preference to `dataProp`.
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11838">line 11838</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id=".dataProp"><span class="type-signature">(static) </span>dataProp<span class="type-signature"></span></h4>




<div class="description">
    This parameter has been replaced by `data` in DataTables to ensure naming
consistency. `dataProp` can still be used, as there is backwards
compatibility in DataTables for this option, but it is strongly
recommended that you use `data` in preference to `dataProp`.
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11838">line 11838</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id=".dataProp"><span class="type-signature">(static) </span>dataProp<span class="type-signature"></span></h4>




<div class="description">
    This parameter has been replaced by `data` in DataTables to ensure naming
consistency. `dataProp` can still be used, as there is backwards
compatibility in DataTables for this option, but it is strongly
recommended that you use `data` in preference to `dataProp`.
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11838">line 11838</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id=".defaultContent"><span class="type-signature">(static) </span>defaultContent<span class="type-signature"> :string</span></h4>




<div class="description">
    Allows a default value to be given for a column's data, and will be used
whenever a null data source is encountered (this can be because `data`
is set to null, or because the data source itself is null).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12233">line 12233</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         {
           "data": null,
           "defaultContent": "Edit",
           "targets": [ -1 ]
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "data": null,
           "defaultContent": "Edit"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".defaultContent"><span class="type-signature">(static) </span>defaultContent<span class="type-signature"> :string</span></h4>




<div class="description">
    Allows a default value to be given for a column's data, and will be used
whenever a null data source is encountered (this can be because `data`
is set to null, or because the data source itself is null).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12233">line 12233</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         {
           "data": null,
           "defaultContent": "Edit",
           "targets": [ -1 ]
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "data": null,
           "defaultContent": "Edit"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".defaultContent"><span class="type-signature">(static) </span>defaultContent<span class="type-signature"> :string</span></h4>




<div class="description">
    Allows a default value to be given for a column's data, and will be used
whenever a null data source is encountered (this can be because `data`
is set to null, or because the data source itself is null).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12233">line 12233</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         {
           "data": null,
           "defaultContent": "Edit",
           "targets": [ -1 ]
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         null,
         {
           "data": null,
           "defaultContent": "Edit"
         }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".name"><span class="type-signature">(static) </span>name<span class="type-signature"> :string</span></h4>




<div class="description">
    This parameter is only used in DataTables' server-side processing. It can
be exceptionally useful to know what columns are being displayed on the
client side, and to map these to database fields. When defined, the names
also allow DataTables to reorder information from the server if it comes
back in an unexpected order (i.e. if you switch your columns around on the
client-side, your server-side code does not also need updating).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12276">line 12276</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "name": "engine", "targets": [ 0 ] },
         { "name": "browser", "targets": [ 1 ] },
         { "name": "platform", "targets": [ 2 ] },
         { "name": "version", "targets": [ 3 ] },
         { "name": "grade", "targets": [ 4 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "name": "engine" },
         { "name": "browser" },
         { "name": "platform" },
         { "name": "version" },
         { "name": "grade" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".name"><span class="type-signature">(static) </span>name<span class="type-signature"> :string</span></h4>




<div class="description">
    This parameter is only used in DataTables' server-side processing. It can
be exceptionally useful to know what columns are being displayed on the
client side, and to map these to database fields. When defined, the names
also allow DataTables to reorder information from the server if it comes
back in an unexpected order (i.e. if you switch your columns around on the
client-side, your server-side code does not also need updating).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12276">line 12276</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "name": "engine", "targets": [ 0 ] },
         { "name": "browser", "targets": [ 1 ] },
         { "name": "platform", "targets": [ 2 ] },
         { "name": "version", "targets": [ 3 ] },
         { "name": "grade", "targets": [ 4 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "name": "engine" },
         { "name": "browser" },
         { "name": "platform" },
         { "name": "version" },
         { "name": "grade" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".name"><span class="type-signature">(static) </span>name<span class="type-signature"> :string</span></h4>




<div class="description">
    This parameter is only used in DataTables' server-side processing. It can
be exceptionally useful to know what columns are being displayed on the
client side, and to map these to database fields. When defined, the names
also allow DataTables to reorder information from the server if it comes
back in an unexpected order (i.e. if you switch your columns around on the
client-side, your server-side code does not also need updating).
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li><i>Empty string</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12276">line 12276</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "name": "engine", "targets": [ 0 ] },
         { "name": "browser", "targets": [ 1 ] },
         { "name": "platform", "targets": [ 2 ] },
         { "name": "version", "targets": [ 3 ] },
         { "name": "grade", "targets": [ 4 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "name": "engine" },
         { "name": "browser" },
         { "name": "platform" },
         { "name": "version" },
         { "name": "grade" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderable"><span class="type-signature">(static) </span>orderable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable ordering on this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11740">line 11740</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderable"><span class="type-signature">(static) </span>orderable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable ordering on this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11740">line 11740</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderable"><span class="type-signature">(static) </span>orderable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable ordering on this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11740">line 11740</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderData"><span class="type-signature">(static) </span>orderData<span class="type-signature"> :array|int</span></h4>




<div class="description">
    Define which column(s) an order will occur on for this column. This
allows a column's ordering to take multiple columns into account when
doing a sort or use the data from a different column. For example first
name / last name columns make sense to do a multi-column sort over the
two columns.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>
|

<span class="param-type">int</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Takes the value of the column index automatically</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11626">line 11626</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderData": [ 0, 1 ], "targets": [ 0 ] },
         { "orderData": [ 1, 0 ], "targets": [ 1 ] },
         { "orderData": 2, "targets": [ 2 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderData": [ 0, 1 ] },
         { "orderData": [ 1, 0 ] },
         { "orderData": 2 },
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderData"><span class="type-signature">(static) </span>orderData<span class="type-signature"> :array|int</span></h4>




<div class="description">
    Define which column(s) an order will occur on for this column. This
allows a column's ordering to take multiple columns into account when
doing a sort or use the data from a different column. For example first
name / last name columns make sense to do a multi-column sort over the
two columns.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>
|

<span class="param-type">int</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Takes the value of the column index automatically</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11626">line 11626</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderData": [ 0, 1 ], "targets": [ 0 ] },
         { "orderData": [ 1, 0 ], "targets": [ 1 ] },
         { "orderData": 2, "targets": [ 2 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderData": [ 0, 1 ] },
         { "orderData": [ 1, 0 ] },
         { "orderData": 2 },
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderData"><span class="type-signature">(static) </span>orderData<span class="type-signature"> :array|int</span></h4>




<div class="description">
    Define which column(s) an order will occur on for this column. This
allows a column's ordering to take multiple columns into account when
doing a sort or use the data from a different column. For example first
name / last name columns make sense to do a multi-column sort over the
two columns.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>
|

<span class="param-type">int</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Takes the value of the column index automatically</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11626">line 11626</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderData": [ 0, 1 ], "targets": [ 0 ] },
         { "orderData": [ 1, 0 ], "targets": [ 1 ] },
         { "orderData": 2, "targets": [ 2 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "orderData": [ 0, 1 ] },
         { "orderData": [ 1, 0 ] },
         { "orderData": 2 },
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderDataType"><span class="type-signature">(static) </span>orderDataType<span class="type-signature"> :string</span></h4>




<div class="description">
    Defines a data source type for the ordering which can be used to read
real-time information from the table (updating the internally cached
version) prior to ordering. This allows ordering to occur on user
editable elements such as form inputs.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>std</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12320">line 12320</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
         { "type": "numeric", "targets": [ 3 ] },
         { "orderDataType": "dom-select", "targets": [ 4 ] },
         { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         { "orderDataType": "dom-text" },
         { "orderDataType": "dom-text", "type": "numeric" },
         { "orderDataType": "dom-select" },
         { "orderDataType": "dom-checkbox" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderDataType"><span class="type-signature">(static) </span>orderDataType<span class="type-signature"> :string</span></h4>




<div class="description">
    Defines a data source type for the ordering which can be used to read
real-time information from the table (updating the internally cached
version) prior to ordering. This allows ordering to occur on user
editable elements such as form inputs.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>std</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12320">line 12320</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
         { "type": "numeric", "targets": [ 3 ] },
         { "orderDataType": "dom-select", "targets": [ 4 ] },
         { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         { "orderDataType": "dom-text" },
         { "orderDataType": "dom-text", "type": "numeric" },
         { "orderDataType": "dom-select" },
         { "orderDataType": "dom-checkbox" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderDataType"><span class="type-signature">(static) </span>orderDataType<span class="type-signature"> :string</span></h4>




<div class="description">
    Defines a data source type for the ordering which can be used to read
real-time information from the table (updating the internally cached
version) prior to ordering. This allows ordering to occur on user
editable elements such as form inputs.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>std</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12320">line 12320</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
         { "type": "numeric", "targets": [ 3 ] },
         { "orderDataType": "dom-select", "targets": [ 4 ] },
         { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         null,
         { "orderDataType": "dom-text" },
         { "orderDataType": "dom-text", "type": "numeric" },
         { "orderDataType": "dom-select" },
         { "orderDataType": "dom-checkbox" }
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderSequence"><span class="type-signature">(static) </span>orderSequence<span class="type-signature"> :array</span></h4>




<div class="description">
    You can control the default ordering direction, and even alter the
behaviour of the sort handler (i.e. only allow ascending ordering etc)
using this parameter.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>[ 'asc', 'desc' ]</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11668">line 11668</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderSequence": [ "asc" ], "targets": [ 1 ] },
         { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
         { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         { "orderSequence": [ "asc" ] },
         { "orderSequence": [ "desc", "asc", "asc" ] },
         { "orderSequence": [ "desc" ] },
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderSequence"><span class="type-signature">(static) </span>orderSequence<span class="type-signature"> :array</span></h4>




<div class="description">
    You can control the default ordering direction, and even alter the
behaviour of the sort handler (i.e. only allow ascending ordering etc)
using this parameter.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>[ 'asc', 'desc' ]</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11668">line 11668</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderSequence": [ "asc" ], "targets": [ 1 ] },
         { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
         { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         { "orderSequence": [ "asc" ] },
         { "orderSequence": [ "desc", "asc", "asc" ] },
         { "orderSequence": [ "desc" ] },
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".orderSequence"><span class="type-signature">(static) </span>orderSequence<span class="type-signature"> :array</span></h4>




<div class="description">
    You can control the default ordering direction, and even alter the
behaviour of the sort handler (i.e. only allow ascending ordering etc)
using this parameter.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">array</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>[ 'asc', 'desc' ]</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11668">line 11668</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "orderSequence": [ "asc" ], "targets": [ 1 ] },
         { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
         { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         null,
         { "orderSequence": [ "asc" ] },
         { "orderSequence": [ "desc", "asc", "asc" ] },
         { "orderSequence": [ "desc" ] },
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".render"><span class="type-signature">(static) </span>render<span class="type-signature"> :string|int|function|object|null</span></h4>




<div class="description">
    This property is the rendering partner to `data` and it is suggested that
when you want to manipulate data for display (including filtering,
sorting etc) without altering the underlying data for the table, use this
property. `render` can be considered to be the the read only companion to
`data` which is read / write (then as such more complex). Like `data`
this option can be given in a number of different ways to effect its
behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object.
* `object` - use different data for the different data types requested by
  DataTables ('filter', 'display', 'type' or 'sort'). The property names
  of the object is the data type the property refers to and the value can
  defined using an integer, string or function using the same rules as
  `render` normally does. Note that an `_` option _must_ be specified.
  This is the default value to use if you haven't specified a value for
  the data type requested by DataTables.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * {array|object} The data source for the row (based on `data`)
     * {string} The type call data requested - this will be 'filter',
       'display', 'type' or 'sort'.
     * {array|object} The full data source for the row (not based on
       `data`)
   * Return:
     * The return value from the function is what will be used for the
       data requested.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">object</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null Use the data source value.</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12019">line 12019</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Create a comma separated list from an array of objects
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         {
           "data": "platform",
           "render": "[, ].name"
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Execute a function to obtain data
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": "browserName()"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// As an object, extracting different data for the different types
   // This would be used with a data source such as:
   //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
   // (which has both forms) is used for filtering for if a user inputs either format, while
   // the formatted phone number is the one that is shown in the table.
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": {
           "_": "phone",
           "filter": "phone_filter",
           "display": "phone_display"
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Use as a function to create a link from the data source
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "download_link",
         "render": function ( data, type, full ) {
           return '&lt;a href="'+data+'">Download&lt;/a>';
         }
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".render"><span class="type-signature">(static) </span>render<span class="type-signature"> :string|int|function|object|null</span></h4>




<div class="description">
    This property is the rendering partner to `data` and it is suggested that
when you want to manipulate data for display (including filtering,
sorting etc) without altering the underlying data for the table, use this
property. `render` can be considered to be the the read only companion to
`data` which is read / write (then as such more complex). Like `data`
this option can be given in a number of different ways to effect its
behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object.
* `object` - use different data for the different data types requested by
  DataTables ('filter', 'display', 'type' or 'sort'). The property names
  of the object is the data type the property refers to and the value can
  defined using an integer, string or function using the same rules as
  `render` normally does. Note that an `_` option _must_ be specified.
  This is the default value to use if you haven't specified a value for
  the data type requested by DataTables.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * {array|object} The data source for the row (based on `data`)
     * {string} The type call data requested - this will be 'filter',
       'display', 'type' or 'sort'.
     * {array|object} The full data source for the row (not based on
       `data`)
   * Return:
     * The return value from the function is what will be used for the
       data requested.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">object</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null Use the data source value.</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12019">line 12019</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Create a comma separated list from an array of objects
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         {
           "data": "platform",
           "render": "[, ].name"
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Execute a function to obtain data
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": "browserName()"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// As an object, extracting different data for the different types
   // This would be used with a data source such as:
   //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
   // (which has both forms) is used for filtering for if a user inputs either format, while
   // the formatted phone number is the one that is shown in the table.
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": {
           "_": "phone",
           "filter": "phone_filter",
           "display": "phone_display"
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Use as a function to create a link from the data source
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "download_link",
         "render": function ( data, type, full ) {
           return '&lt;a href="'+data+'">Download&lt;/a>';
         }
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".render"><span class="type-signature">(static) </span>render<span class="type-signature"> :string|int|function|object|null</span></h4>




<div class="description">
    This property is the rendering partner to `data` and it is suggested that
when you want to manipulate data for display (including filtering,
sorting etc) without altering the underlying data for the table, use this
property. `render` can be considered to be the the read only companion to
`data` which is read / write (then as such more complex). Like `data`
this option can be given in a number of different ways to effect its
behaviour:

* `integer` - treated as an array index for the data source. This is the
  default that DataTables uses (incrementally increased for each column).
* `string` - read an object property from the data source. There are
  three 'special' options that can be used in the string to alter how
  DataTables reads the data from the source object:
   * `.` - Dotted Javascript notation. Just as you use a `.` in
     Javascript to read from nested objects, so to can the options
     specified in `data`. For example: `browser.version` or
     `browser.name`. If your object parameter name contains a period, use
     `\\` to escape it - i.e. `first\\.name`.
   * `[]` - Array notation. DataTables can automatically combine data
     from and array source, joining the data with the characters provided
     between the two brackets. For example: `name[, ]` would provide a
     comma-space separated list from the source array. If no characters
     are provided between the brackets, the original array source is
     returned.
   * `()` - Function notation. Adding `()` to the end of a parameter will
     execute a function of the name given. For example: `browser()` for a
     simple function on the data source, `browser.version()` for a
     function in a nested property or even `browser().version` to get an
     object property if the function called returns an object.
* `object` - use different data for the different data types requested by
  DataTables ('filter', 'display', 'type' or 'sort'). The property names
  of the object is the data type the property refers to and the value can
  defined using an integer, string or function using the same rules as
  `render` normally does. Note that an `_` option _must_ be specified.
  This is the default value to use if you haven't specified a value for
  the data type requested by DataTables.
* `function` - the function given will be executed whenever DataTables
  needs to set or get the data for a cell in the column. The function
  takes three parameters:
   * Parameters:
     * {array|object} The data source for the row (based on `data`)
     * {string} The type call data requested - this will be 'filter',
       'display', 'type' or 'sort'.
     * {array|object} The full data source for the row (not based on
       `data`)
   * Return:
     * The return value from the function is what will be used for the
       data requested.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>
|

<span class="param-type">int</span>
|

<span class="param-type">function</span>
|

<span class="param-type">object</span>
|

<span class="param-type">null</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null Use the data source value.</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12019">line 12019</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Create a comma separated list from an array of objects
   $(document).ready( function() {
     $('#example').dataTable( {
       "ajaxSource": "sources/deep.txt",
       "columns": [
         { "data": "engine" },
         { "data": "browser" },
         {
           "data": "platform",
           "render": "[, ].name"
         }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Execute a function to obtain data
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": "browserName()"
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// As an object, extracting different data for the different types
   // This would be used with a data source such as:
   //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
   // (which has both forms) is used for filtering for if a user inputs either format, while
   // the formatted phone number is the one that is shown in the table.
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": null, // Use the full data source object for the renderer's source
         "render": {
           "_": "phone",
           "filter": "phone_filter",
           "display": "phone_display"
         }
       } ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Use as a function to create a link from the data source
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [ {
         "targets": [ 0 ],
         "data": "download_link",
         "render": function ( data, type, full ) {
           return '&lt;a href="'+data+'">Download&lt;/a>';
         }
       } ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".searchable"><span class="type-signature">(static) </span>searchable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable filtering on the data in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11707">line 11707</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "searchable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "searchable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".searchable"><span class="type-signature">(static) </span>searchable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable filtering on the data in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11707">line 11707</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "searchable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "searchable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".searchable"><span class="type-signature">(static) </span>searchable<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable filtering on the data in this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11707">line 11707</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "searchable": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "searchable": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".title"><span class="type-signature">(static) </span>title<span class="type-signature"> :string</span></h4>




<div class="description">
    The title of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Derived from the 'TH' value for this column in the
   original HTML table.</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12362">line 12362</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "title": "My column title", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "title": "My column title" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".title"><span class="type-signature">(static) </span>title<span class="type-signature"> :string</span></h4>




<div class="description">
    The title of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Derived from the 'TH' value for this column in the
   original HTML table.</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12362">line 12362</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "title": "My column title", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "title": "My column title" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".title"><span class="type-signature">(static) </span>title<span class="type-signature"> :string</span></h4>




<div class="description">
    The title of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Derived from the 'TH' value for this column in the
   original HTML table.</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12362">line 12362</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "title": "My column title", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "title": "My column title" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".type"><span class="type-signature">(static) </span>type<span class="type-signature"> :string</span></h4>




<div class="description">
    The type allows you to specify how the data for this column will be
ordered. Four types (string, numeric, date and html (which will strip
HTML tags before ordering)) are currently available. Note that only date
formats understood by Javascript's Date() object will be accepted as type
date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
'numeric', 'date' or 'html' (by default). Further types can be adding
through plug-ins.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Auto-detected from raw data</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12398">line 12398</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "type": "html", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "type": "html" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".type"><span class="type-signature">(static) </span>type<span class="type-signature"> :string</span></h4>




<div class="description">
    The type allows you to specify how the data for this column will be
ordered. Four types (string, numeric, date and html (which will strip
HTML tags before ordering)) are currently available. Note that only date
formats understood by Javascript's Date() object will be accepted as type
date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
'numeric', 'date' or 'html' (by default). Further types can be adding
through plug-ins.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Auto-detected from raw data</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12398">line 12398</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "type": "html", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "type": "html" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".type"><span class="type-signature">(static) </span>type<span class="type-signature"> :string</span></h4>




<div class="description">
    The type allows you to specify how the data for this column will be
ordered. Four types (string, numeric, date and html (which will strip
HTML tags before ordering)) are currently available. Note that only date
formats understood by Javascript's Date() object will be accepted as type
date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
'numeric', 'date' or 'html' (by default). Further types can be adding
through plug-ins.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Auto-detected from raw data</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12398">line 12398</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "type": "html", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "type": "html" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".visible"><span class="type-signature">(static) </span>visible<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable the display of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11773">line 11773</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "visible": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "visible": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".visible"><span class="type-signature">(static) </span>visible<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable the display of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line11773">line 11773</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "visible": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "visible": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".visible"><span class="type-signature">(static) </span>visible<span class="type-signature"> :boolean</span></h4>




<div class="description">
    Enable or disable the display of this column.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">boolean</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line11773">line 11773</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "visible": false, "targets": [ 0 ] }
       ] } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "visible": false },
         null,
         null,
         null,
         null
       ] } );
   } );</code></pre>



        
            
<h4 class="name" id=".width"><span class="type-signature">(static) </span>width<span class="type-signature"> :string</span></h4>




<div class="description">
    Defining the width of the column, this parameter may take any CSS value
(3em, 20px etc). DataTables applies 'smart' widths to columns which have not
been given a specific width through this interface ensuring that the table
remains readable.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Automatic</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/bin/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_bin_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12439">line 12439</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "width": "20%", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "width": "20%" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".width"><span class="type-signature">(static) </span>width<span class="type-signature"> :string</span></h4>




<div class="description">
    Defining the width of the column, this parameter may take any CSS value
(3em, 20px etc). DataTables applies 'smart' widths to columns which have not
been given a specific width through this interface ensuring that the table
remains readable.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Automatic</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html">proteomics_cpp/toppic_resources/topview/js/lib/jquery.dataTables.js</a>, <a href="proteomics_cpp_toppic_resources_topview_js_lib_jquery.dataTables.js.html#line12439">line 12439</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "width": "20%", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "width": "20%" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
            
<h4 class="name" id=".width"><span class="type-signature">(static) </span>width<span class="type-signature"> :string</span></h4>




<div class="description">
    Defining the width of the column, this parameter may take any CSS value
(3em, 20px etc). DataTables applies 'smart' widths to columns which have not
been given a specific width through this interface ensuring that the table
remains readable.
</div>



    <h5>Type:</h5>
    <ul>
        <li>
            
<span class="param-type">string</span>


        </li>
    </ul>





<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>null <i>Automatic</i></li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="public_resources_topview_js_lib_jquery.dataTables.js.html">public/resources/topview/js/lib/jquery.dataTables.js</a>, <a href="public_resources_topview_js_lib_jquery.dataTables.js.html#line12439">line 12439</a>
    </li></ul></dd>
    

    

    

    
</dl>





    <h5>Examples</h5>
    
    <pre class="prettyprint"><code>// Using `columnDefs`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columnDefs": [
         { "width": "20%", "targets": [ 0 ] }
       ]
     } );
   } );

 </code></pre>

    <pre class="prettyprint"><code>// Using `columns`
   $(document).ready( function() {
     $('#example').dataTable( {
       "columns": [
         { "width": "20%" },
         null,
         null,
         null,
         null
       ]
     } );
   } );</code></pre>



        
    

    

    

    
</article>

</section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Namespaces</h3><ul><li><a href="-_anonymous_-altEditor.classes.html">classes</a></li><li><a href="-_anonymous_-altEditor.defaults.html">defaults</a></li><li><a href="-_ext.type.html">type</a></li><li><a href="Common%2520and%2520useful%2520DOM%2520elements%2520for%2520the%2520class%2520instance.html">Common and useful DOM elements for the class instance</a></li><li><a href="DataTable.defaults.html">defaults</a></li><li><a href="DataTable.defaults.classes.html">classes</a></li><li><a href="DataTable.defaults.html#.column">column</a></li><li><a href="DataTable.defaults.language.html">language</a></li><li><a href="DataTable.defaults.language.aria.html">aria</a></li><li><a href="DataTable.defaults.language.paginate.html">paginate</a></li><li><a href="DataTable.defaults.search.html">search</a></li><li><a href="DataTable.ext.html">ext</a></li><li><a href="DataTable.models.html">models</a></li><li><a href="DataTable.models.oColumn.html">oColumn</a></li><li><a href="DataTable.models.oRow.html">oRow</a></li><li><a href="DataTable.models.oSearch.html">oSearch</a></li><li><a href="DataTable.models.oSettings.html">oSettings</a></li><li><a href="DataTable.models.oSettings.oBrowser.html">oBrowser</a></li><li><a href="DataTable.models.oSettings.oFeatures.html">oFeatures</a></li><li><a href="DataTable.models.oSettings.oLanguage.html">oLanguage</a></li><li><a href="DataTable.models.oSettings.oPreviousSearch.html">oPreviousSearch</a></li><li><a href="DataTable.models.oSettings.oScroll.html">oScroll</a></li><li><a href="DataTable.render.html">render</a></li><li><a href="DataTable.util.html">util</a></li><li><a href="Settings%2520object%2520which%2520contains%2520customisable%2520information%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520for%2520altEditor%2520instance.html">Settings object which contains customisable information
           for altEditor instance</a></li></ul><h3>Classes</h3><ul><li><a href="CalculateEmassAndDistribution.html">CalculateEmassAndDistribution</a></li><li><a href="Constants.html">Constants</a></li><li><a href="DataTable.Api.html">Api</a></li><li><a href="GetMassTableOfSelectedIons.html">GetMassTableOfSelectedIons</a></li><li><a href="MolecularFormulae.html">MolecularFormulae</a></li><li><a href="SpectrumDownload.html">SpectrumDownload</a></li><li><a href="DataTable_.html">~DataTable</a></li></ul><h3>Events</h3><ul><li><a href="DataTable_column-sizing.html#.event:dt">dt</a></li><li><a href="DataTable_column-visibility.html#.event:dt">dt</a></li><li><a href="DataTable_destroy.html#.event:dt">dt</a></li><li><a href="DataTable_draw.html#.event:dt">dt</a></li><li><a href="DataTable_init.html#.event:dt">dt</a></li><li><a href="DataTable_length.html#.event:dt">dt</a></li><li><a href="DataTable_order.html#.event:dt">dt</a></li><li><a href="DataTable_page.html#.event:dt">dt</a></li><li><a href="DataTable_processing.html#.event:dt">dt</a></li><li><a href="DataTable_search.html#.event:dt">dt</a></li><li><a href="DataTable_stateLoaded.html#.event:dt">dt</a></li><li><a href="DataTable_stateLoadParams.html#.event:dt">dt</a></li><li><a href="DataTable_stateSaveParams.html#.event:dt">dt</a></li><li><a href="DataTable_xhr.html#.event:dt">dt</a></li></ul><h3>Global</h3><ul><li><a href="global.html#$">$</a></li><li><a href="global.html#_">_</a></li><li><a href="global.html#_addRowCallback">_addRowCallback</a></li><li><a href="global.html#_addRowData">_addRowData</a></li><li><a href="global.html#_deleteRow">_deleteRow</a></li><li><a href="global.html#_deleteRowCallback">_deleteRowCallback</a></li><li><a href="global.html#_editRowCallback">_editRowCallback</a></li><li><a href="global.html#_editRowData">_editRowData</a></li><li><a href="global.html#_errorCallback">_errorCallback</a></li><li><a href="global.html#addBackGround">addBackGround</a></li><li><a href="global.html#addCircles">addCircles</a></li><li><a href="global.html#addDatatoAxis">addDatatoAxis</a></li><li><a href="global.html#addLabels">addLabels</a></li><li><a href="global.html#addSpectrum">addSpectrum</a></li><li><a href="global.html#api">api</a></li><li><a href="global.html#calibrateCoordinates">calibrateCoordinates</a></li><li><a href="global.html#calibrateLeftNum">calibrateLeftNum</a></li><li><a href="global.html#calibrateRightNum">calibrateRightNum</a></li><li><a href="global.html#calibrateSkipEnd">calibrateSkipEnd</a></li><li><a href="global.html#calibrateSkipStart">calibrateSkipStart</a></li><li><a href="global.html#checkWaitTasks">checkWaitTasks</a></li><li><a href="global.html#completeColumnDefs">completeColumnDefs</a></li><li><a href="global.html#createDialog">createDialog</a></li><li><a href="global.html#drag">drag</a></li><li><a href="global.html#drawAxis">drawAxis</a></li><li><a href="global.html#drawIons">drawIons</a></li><li><a href="global.html#drawPeaks">drawPeaks</a></li><li><a href="global.html#drawSequence">drawSequence</a></li><li><a href="global.html#drawSpectrum">drawSpectrum</a></li><li><a href="global.html#drawTicks">drawTicks</a></li><li><a href="global.html">Edit a row</a></li><li><a href="global.html#fnAddData">fnAddData</a></li><li><a href="global.html#fnAdjustColumnSizing">fnAdjustColumnSizing</a></li><li><a href="global.html#fnClearTable">fnClearTable</a></li><li><a href="global.html#fnClose">fnClose</a></li><li><a href="global.html#fnDeleteRow">fnDeleteRow</a></li><li><a href="global.html#fnDestroy">fnDestroy</a></li><li><a href="global.html#fnDraw">fnDraw</a></li><li><a href="global.html#fnFilter">fnFilter</a></li><li><a href="global.html#fnGetData">fnGetData</a></li><li><a href="global.html#fnGetNodes">fnGetNodes</a></li><li><a href="global.html#fnGetPosition">fnGetPosition</a></li><li><a href="global.html#fnIsOpen">fnIsOpen</a></li><li><a href="global.html#fnOpen">fnOpen</a></li><li><a href="global.html#fnPageChange">fnPageChange</a></li><li><a href="global.html#fnSetColumnVis">fnSetColumnVis</a></li><li><a href="global.html#fnSettings">fnSettings</a></li><li><a href="global.html#fnSort">fnSort</a></li><li><a href="global.html#fnSortListener">fnSortListener</a></li><li><a href="global.html#fnUpdate">fnUpdate</a></li><li><a href="global.html#fnVersionCheck">fnVersionCheck</a></li><li><a href="global.html#getAminoAcidDistribution">getAminoAcidDistribution</a></li><li><a href="global.html#getCircleSize">getCircleSize</a></li><li><a href="global.html#getEnvelopeData">getEnvelopeData</a></li><li><a href="global.html#getIonData">getIonData</a></li><li><a href="global.html#getIsotopicMassOfAtom">getIsotopicMassOfAtom</a></li><li><a href="global.html#getIsotopicMassRef">getIsotopicMassRef</a></li><li><a href="global.html#getNormalizedIntensity">getNormalizedIntensity</a></li><li><a href="global.html#getPeakXPos">getPeakXPos</a></li><li><a href="global.html#getPeakYPos">getPeakYPos</a></li><li><a href="global.html#getTickHeight">getTickHeight</a></li><li><a href="global.html#getTickWidth">getTickWidth</a></li><li><a href="global.html#getY">getY</a></li><li><a href="global.html#groupBy">groupBy</a></li><li><a href="global.html#initScale">initScale</a></li><li><a href="global.html#job">job</a></li><li><a href="global.html#onAddRow">onAddRow</a></li><li><a href="global.html#onCircleMouseOut">onCircleMouseOut</a></li><li><a href="global.html#onclickTopView">onclickTopView</a></li><li><a href="global.html#onDeleteRow">onDeleteRow</a></li><li><a href="global.html#onDragLimits">onDragLimits</a></li><li><a href="global.html#onEditRow">onEditRow</a></li><li><a href="global.html#onMouseOut">onMouseOut</a></li><li><a href="global.html#onMouseOverCircle">onMouseOverCircle</a></li><li><a href="global.html#onMouseOverPeak">onMouseOverPeak</a></li><li><a href="global.html#onPeakMouseOut">onPeakMouseOut</a></li><li><a href="global.html#parameters">parameters</a></li><li><a href="global.html#reloadOptions">reloadOptions</a></li><li><a href="global.html#setLimits">setLimits</a></li><li><a href="global.html#showAllPeaks">showAllPeaks</a></li><li><a href="global.html#showIonPeaks">showIonPeaks</a></li><li><a href="global.html#showMatchedPeaks">showMatchedPeaks</a></li><li><a href="global.html#showNonMatchedPeaks">showNonMatchedPeaks</a></li><li><a href="global.html#showNotMatchedPeaks">showNotMatchedPeaks</a></li><li><a href="global.html#sortEnvelopes">sortEnvelopes</a></li><li><a href="global.html#SpectrumGraph">SpectrumGraph</a></li><li><a href="global.html#svgIds">svgIds</a></li><li><a href="global.html#updateSeq">updateSeq</a></li><li><a href="global.html#xZoom">xZoom</a></li><li><a href="global.html#yZoom">yZoom</a></li><li><a href="global.html#zoom">zoom</a></li><li><a href="global.html#%257BonClickSequenceOfExecution%257Dexecuteswhenuserentersmassshiftonanyaminoacidandclick%2522OK%2522button.">{onClickSequenceOfExecution} executes when user enters mass shift 
on any amino acid and click "OK" button.</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 3.6.4</a> on Thu Apr 16 2020 16:10:17 GMT-0400 (Eastern Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>